<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Collecte des indicateurs ‚Äì <%= ((user && user.inspection)||'Inspection').toUpperCase() %></title>
  <style>

    

    .btn.danger{background:#fff5f5;border-color:#fecaca;color:#b91c1c}
.btn.danger:hover{background:#fee2e2}
.warn{background:#fff7ed;border:1px solid #fed7aa;border-radius:8px;padding:8px}

    :root{--bg:#f7f7f7;--b:#cfd4da;--th:#eef1f4;--ink:#1f2937;--muted:#6b7280;--brand:#2563eb;--brand-2:#1e40af}
    *{box-sizing:border-box}
    body{font-family:Arial,Helvetica,sans-serif;background:var(--bg);margin:0;color:var(--ink)}
    a{color:var(--ink);text-decoration:none}
    .wrap{padding:18px}
    h1{margin:0 0 10px;display:flex;align-items:center;gap:10px}
    .badge{display:inline-block;background:#111;color:#fff;border-radius:999px;padding:2px 8px;font-size:12px;line-height:18px}
    .topbar{display:flex;justify-content:space-between;align-items:center;margin-bottom:14px}
    .top-actions{display:flex;gap:8px;flex-wrap:wrap}
    .btn{border:1px solid #d1d5db;background:#fff;border-radius:8px;padding:7px 10px;font-size:13px;cursor:pointer}
    .btn:hover{background:#f7f7f7}
    .btn.primary{background:var(--brand);border-color:var(--brand);color:#fff}
    .btn.ghost{background:#f0f4ff;border-color:#dbe4ff}
    label,select{display:block;margin:8px 0 0}
    select{padding:4px 8px;border-radius:8px;border:1px solid var(--b);background:#fff}
    .layout{display:grid;grid-template-columns:1fr 360px;gap:16px}
    .bloc{background:#fff;border:1px solid var(--b);border-radius:10px;padding:10px 10px 6px;box-shadow:0 2px 6px rgba(0,0,0,.04);margin-bottom:16px}
    .bloc header{display:flex;align-items:center;justify-content:space-between}
    .bloc header .actions{display:flex;gap:8px;flex-wrap:wrap}
    table{width:100%;border-collapse:collapse;font-size:12px;margin-top:8px}
    th,td{border:1px solid var(--b);padding:4px 6px;text-align:center;vertical-align:middle}
    th{background:var(--th)}
    td[contenteditable]{background:#fffbe6;text-align:left}
    input[type=number]{width:72px}
    .totalRow td{background:#f6f6f6;font-weight:600}
    .note{opacity:.75}
    .hidden{display:none}
    .fixed{background:#eef6ff !important}
    .card{background:#fff;border:1px solid var(--b);border-radius:10px;padding:12px;margin-bottom:16px}
    .card h3{margin:0 0 8px;font-size:15px}
    .stat{font-weight:700}
    .drop{border:2px dashed #cbd5e1;border-radius:10px;padding:14px;text-align:center;background:#fafbfc}
    .drop.drag{background:#eef6ff;border-color:#93c5fd}
    .muted{color:var(--muted);font-size:12px}
    
    
   
    
    
    /* ===== Modale ===== */
    .modal{position:fixed;inset:0;background:rgba(0,0,0,.4);display:none;align-items:center;justify-content:center;padding:16px;z-index:50}
    .modal.open{display:flex}
    .dialog{width:min(1160px,98vw);max-height:94vh;background:#fff;border:1px solid var(--b);border-radius:12px;display:flex;flex-direction:column;overflow:hidden}
    .dialog header{position:sticky;top:0;background:#fff;border-bottom:1px solid var(--b);padding:10px 12px;z-index:1;display:flex;justify-content:space-between;align-items:center;gap:8px}
    .dialog .content{padding:0;overflow:auto;flex:1}
    .dialog footer{position:sticky;bottom:0;background:#fff;border-top:1px solid var(--b);padding:10px 12px;display:flex;justify-content:space-between;align-items:center;gap:8px}
    .cols-modal{display:grid;grid-template-columns:1.05fr 1fr;gap:0}
    .pane{padding:12px}
    .pane + .pane{border-left:1px solid var(--b)}
    .subtle{font-size:12px;color:var(--muted)}
    .bwrap{border:1px solid var(--b);border-radius:8px;padding:6px;background:#fff}
    .bwrap.x{overflow-x:auto}
    .hstack{display:flex;gap:8px;flex-wrap:wrap;align-items:end;margin:6px 0}
    .classList{display:flex;flex-direction:column;gap:4px;max-height:45vh;overflow:auto}
    .classItem{padding:6px 8px;border:1px solid #e5e7eb;border-radius:8px;cursor:pointer;background:#fafafa}
    .classItem.active{border-color:var(--brand);background:#eef4ff}
    .toolbar{display:flex;gap:6px;flex-wrap:wrap;margin:6px 0}
    .chip{display:inline-block;border:1px solid var(--b);border-radius:999px;padding:2px 8px;margin-right:6px;background:#f7f7fb}
    /* Lisibilit√© tableau baselines */
    #bTable{table-layout:fixed;min-width:980px}
    #bTable th:first-child,#bTable td:first-child{width:320px;text-align:left}
    #bTable thead th{position:sticky;top:0;z-index:1}
    #bTable td input[type=number]{text-align:right}
    #bTable td:last-child, #bTable th:last-child{width:56px}
    #bTable td input[type=text]{white-space:normal}
    /* ======== AM√âLIORATIONS ‚Äî Effectifs & Personnel ======== */
    .bwrap.eff {max-height:36vh; min-height:220px; overflow:auto}
    .bwrap.staff{max-height:26vh; min-height:180px; overflow:auto}
    .tbl-mini{font-size:13px;border-collapse:collapse;width:100%;table-layout:fixed}
    .tbl-mini thead th{position:sticky;top:0;background:#f8fafc;z-index:1}
    .tbl-mini th,.tbl-mini td{padding:6px 8px;border-bottom:1px solid #e5e7eb}
    .tbl-mini tbody tr:nth-child(odd){background:#fafafa}
    .tbl-mini input[type=text], .tbl-mini input[type=number], .tbl-mini textarea{ width:100%;height:32px;line-height:32px; padding:6px 8px;border:1px solid var(--b);border-radius:6px;box-sizing:border-box; font-size:13px;background:#fff; }
    .tbl-mini textarea{height:36px;resize:vertical}
    .tbl-mini input[type=number]{text-align:right}
    .tbl-mini input[type=number]::-webkit-outer-spin-button, .tbl-mini input[type=number]::-webkit-inner-spin-button{ -webkit-appearance:none; margin:0 }
    .tbl-mini input[type=number]{ -moz-appearance:textfield }
  /* largeurs verrouill√©es ‚Äî Effectifs (avec divisions) */
#effTable col:nth-child(1){width:280px}      /* Classe (base) */
#effTable col:nth-child(2){width:72px}       /* Div. */
#effTable col:nth-child(3){width:100px}      /* F */
#effTable col:nth-child(4){width:100px}      /* G */
#effTable col:nth-child(5){width:72px}       /* actions */
#effTable th:first-child,#effTable td:first-child{text-align:left}

    /* largeurs verrouill√©es ‚Äî Personnel */
    #staffTable col:nth-child(1){width:180px}
    #staffTable col:nth-child(2){width:120px}
    #staffTable col:nth-child(3){width:180px}
    #staffTable col:nth-child(4){width:120px}
    #staffTable col:nth-child(5){width:auto}
    #staffTable col:nth-child(6){width:92px} /* √©largi pour bouton üìÑ */
    #staffTable th:first-child,#staffTable td:first-child{text-align:left}
    /* ===== Hero AP ===== */
    .hero{display:flex;align-items:center;gap:10px;padding:10px;border:1px solid var(--b);border-radius:10px;background:linear-gradient(180deg,#f7fbff,#ffffff)}
    .hero .avatar{width:38px;height:38px;border-radius:50%;background:#e0ecff;display:flex;align-items:center;justify-content:center;font-weight:700;color:var(--brand-2)}
    .hero .name{font-weight:800}
    .hero .etab{font-size:12px;color:var(--brand-2)}
    .hero .insp{font-size:12px;color:#111}
    /* ===== Modale Explorateur Personnel ===== */
    .grid-staff{width:100%;border-collapse:collapse;font-size:13px}
    .grid-staff th,.grid-staff td{border-bottom:1px solid #e5e7eb;padding:8px;text-align:left;vertical-align:top}
    .grid-staff thead th{position:sticky;top:0;background:#f8fafc;z-index:1}
    .pill{display:inline-block;padding:2px 8px;border:1px solid #e5e7eb;border-radius:999px;margin:2px;background:#f9fafb;font-size:12px}
    .kbd{display:inline-block;border:1px solid #ddd;border-bottom-width:2px;padding:0 6px;border-radius:6px;background:#fff;font-size:12px}
    /* ======== File manager am√©lior√© ======== */
/* ===== WhatsApp-like chat ===== */
.wchat { display:flex; flex-direction:column; gap:0; padding:0; overflow:hidden }
.wchat .w-header{display:flex;align-items:center;gap:10px;padding:10px;border:1px solid var(--b);border-radius:10px;background:#075e54;color:#fff}
.wchat .w-name{font-weight:700}
.wchat .w-sub{font-size:12px;opacity:.9}
.wchat .w-avatar{width:34px;height:34px;border-radius:50%;background:#25d366;display:flex;align-items:center;justify-content:center;font-weight:800}
.wchat .w-msgs{border:1px solid var(--b);border-radius:10px;margin-top:8px;height:260px;overflow:auto;padding:10px;
  background:#e5ddd5;
  background-image:
    radial-gradient(rgba(0,0,0,.035) 0.5px, transparent 0.5px),
    radial-gradient(rgba(0,0,0,.035) 0.5px, transparent 0.5px);
  background-position: 0 0, 12px 12px; background-size: 24px 24px;
}
.w-day{display:inline-block;margin:10px auto 4px;padding:3px 10px;border-radius:999px;background:rgba(0,0,0,.08);font-size:11px}
.w-msg{display:flex;gap:6px;margin:8px 0;align-items:flex-end}
.w-avatar-sm{width:24px;height:24px;border-radius:50%;background:#c8e6c9;display:flex;align-items:center;justify-content:center;font-size:11px;font-weight:800;color:#2e7d32}
.w-bubble{max-width:78%;padding:8px 10px;border-radius:14px;box-shadow:0 1px 1px rgba(0,0,0,.06)}
.w-msg.theirs .w-bubble{background:#fff;border-top-left-radius:4px}
.w-msg.mine{justify-content:flex-end}
.w-msg.mine .w-bubble{background:#dcf8c6;border-top-right-radius:4px}
.w-from{font-size:11px;color:#075e54;margin:0 0 2px 2px;font-weight:700}
.w-msg.mine .w-from{color:#0a6e56}
.w-text{white-space:pre-wrap;word-wrap:break-word}
.w-meta{font-size:10px;opacity:.7;text-align:right;margin-top:3px;display:flex;gap:6px;justify-content:flex-end}
.w-ticks{font-weight:700}

/* Quote (reply) */
.w-quote{border-left:3px solid #34b7f1;background:rgba(255,255,255,.7);padding:6px 8px;border-radius:8px;margin-bottom:6px;cursor:pointer}
.w-quote .q-name{font-size:11px;font-weight:700;margin-bottom:2px;color:#1f2937}
.w-quote .q-text{font-size:12px;color:#374151}

/* Barre ‚ÄúR√©pondre √† ‚Ä¶‚Äù au-dessus de l‚Äôinput */
.w-replybar{display:flex;align-items:center;gap:8px;border:1px solid var(--b);border-radius:8px;padding:6px 8px;background:#f1f5f9;margin-top:6px}
.w-replybar .name{font-weight:700}
.w-replybar .snippet{font-size:12px;color:#475569}
.w-replybar .close{margin-left:auto;border:none;background:#e11d48;color:#fff;border-radius:6px;padding:4px 8px;cursor:pointer}
.hidden{display:none}

.wchat .w-input{display:flex;gap:6px;align-items:center;margin-top:8px;border:1px solid var(--b);border-radius:999px;padding:6px 8px;background:#fff}
.w-input .icon{border:none;background:transparent;cursor:pointer;font-size:18px}
.w-input input[type=text]{flex:1;border:none;outline:0;font-size:14px}
.w-input .send{border:none;border-radius:50%;width:34px;height:34px;background:#128c7e;color:#fff;font-weight:800;cursor:pointer}

/* On masque l‚Äôancien composant s‚Äôil restait dans le DOM */
.chat{display:none}

/* Surlignage quand on ouvre un message cit√© */
.flash{animation:flash 1.8s ease 1}
@keyframes flash{0%{box-shadow:0 0 0 0 rgba(255,238,0,.9)}100%{box-shadow:0 0 0 0 transparent}}




    .filetoolbar{display:flex;gap:8px;align-items:center;flex-wrap:wrap;margin:8px 0}
    .filetoolbar .search{flex:1;min-width:120px}
    .filetoolbar input[type=text]{width:100%;border:1px solid var(--b);border-radius:8px;padding:7px 10px}
    .filterchips{display:flex;gap:6px;flex-wrap:wrap}
    .chip.btn{padding:3px 10px;border-radius:999px;cursor:pointer;background:#f8fafc;border-color:#e5e7eb}
    .chip.btn.active{background:#e7efff;border-color:#c7d7ff}
    .filegrid{display:grid;grid-template-columns:repeat(2,1fr);gap:8px;max-height:260px;overflow:auto;border-top:1px dashed #e5e7eb;padding-top:6px}
    @media (min-width:420px){ .filegrid{grid-template-columns:1fr 1fr} }
    @media (min-width:520px){ .filegrid{grid-template-columns:1fr 1fr} }
    @media (min-width:640px){ .filegrid{grid-template-columns:1fr 1fr} }
    .filecard{border:1px solid #e5e7eb;border-radius:10px;padding:8px;display:flex;gap:8px;align-items:flex-start;background:#fff}
    .fileicon{font-size:20px;line-height:1.1}
    .filemeta{flex:1;min-width:0}
    .filemeta .name{font-size:13px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    .filemeta .sub{font-size:11px;color:var(--muted);margin-top:2px;display:flex;gap:8px;flex-wrap:wrap}
  </style>
</head>
<body>
<div class="wrap">
  <div class="topbar">
    <div>
      <h1>
        Collecte des indicateurs p√©dagogiques
        <span id="badgeClasses" class="badge hidden">0 classes</span>
      </h1>
      <div class="muted">
        Connect√© : <strong><%= (user && user.nom) || '‚Äî' %></strong> ‚Äî <em><%= (user && user.etab) || '‚Äî' %></em> ‚Äî
        <span>Inspection <strong><%= ((user && user.inspection)||'').toUpperCase() %></strong></span>
      </div>
      <div class="insp">D√©partement <strong id="deptLabel"><%= (user && user.departement) || '‚Äî' %></strong></div>

    </div>
    <div class="top-actions">
      <button class="btn danger" id="btnOpenPurge">üßπ Purger mes donn√©es</button>
      <button class="btn" id="btnOpenSettings">‚öôÔ∏è Param√®tres √©tablissement</button>
      <button class="btn" id="btnOpenStaffExplorer">üë©‚Äçüè´ Personnel</button>
      <a class="btn" href="/collecte/mes">üóÇÔ∏è Mes collectes</a>
      <a class="btn" href="/fichiers">üìé Documents partag√©s</a>
      <form action="/auth/logout" method="post" style="display:inline"><button class="btn">‚Ü© D√©connexion</button></form>
    </div>
  </div>

  <div class="layout">
    <!-- ======== Colonne principale: Collecte ======== -->
    <div>
      <div class="bloc">
        <label for="cycle">Choisir le cycle :</label>
        <select id="cycle">
          <option value="">-- Choisir --</option>
          <option value="premier">Premier cycle</option>
          <option value="second">Second cycle</option>
        </select>

        <div id="specialiteContainer" class="hidden">
          <label for="specialite">Choisir la sp√©cialit√© :</label>
          <select id="specialite"><option value="">-- Choisir --</option></select>
        </div>

        <div id="evaluationContainer" class="hidden">
          <label for="evaluation">Choisir l'√©valuation :</label>
          <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
            <select id="evaluation">
              <option value="">-- Choisir l'√©valuation --</option>
              <option value="1">√âvaluation 1</option><option value="2">√âvaluation 2</option>
              <option value="3">√âvaluation 3</option><option value="4">√âvaluation 4</option>
              <option value="5">√âvaluation 5</option><option value="6">√âvaluation 6</option>
            </select>
            <button id="btnPrefill" class="btn" type="button" title="Pr√©remplir les colonnes ‚Äòfait‚Äô avec le cumul des √©valuations pr√©c√©dentes">‚Üü Pr√©remplir depuis √©vals pr√©c√©dentes</button>
          </div>
        </div>
      </div>

      <div id="formulaires"></div>

      <div class="bloc hidden" id="cycleTotalBloc">
        <header>
          <h2 id="cycleTotalTitre">Total/Moyenne du cycle</h2>
          <div class="actions">
            <button class="btn" onclick="printCollecte()">üñ® Imprimer la collecte</button>
            <button class="btn primary" id="btnSoumettre" onclick="soumettre()">üì§ Soumettre</button>
            <button class="btn" onclick="exportCSV()">‚¨áÔ∏è Export CSV</button>
            <label class="note" style="display:inline-flex;align-items:center;gap:6px;margin-left:6px">
              <input type="checkbox" id="chkSendCarte"> Inclure la ¬´ carte scolaire ¬ª pour l‚Äôinspecteur
            </label>
            <button class="btn ghost" id="btnSendCarteDirect" type="button" title="Envoyer la carte scolaire (sans enregistrer la collecte)" onclick="soumettreCarteScolaire()">üì° Envoyer la carte scolaire</button>
            <span class="note">Les pourcentages s‚Äôaffichent en ¬´ ‚Äî ¬ª quand le total est 0.</span>
          </div>
        </header>
        <table id="cycleTotalTable"></table>
      </div>
    </div>

    <!-- ======== Sidebar ======== -->
    <aside>
      <div class="card hero">
        <div class="avatar"><%= ((user && user.nom) || 'AP').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase() %></div>
        <div>
          <div class="name"><%= (user && user.nom) || '‚Äî' %></div>
          <div class="etab"><%= (user && user.etab) || '‚Äî' %></div>
          <div class="insp">Inspection <strong><%= ((user && user.inspection)||'').toUpperCase() %></strong></div>
        </div>
      </div>

      <div class="card">
        <h3>R√©sum√©</h3>
        <div><span class="muted">Sp√©cialit√© :</span> <span id="sumSpec" class="stat">‚Äî</span></div>
        <div><span class="muted">√âvaluation :</span> <span id="sumEval" class="stat">‚Äî</span></div>
        <div><span class="muted">Classes :</span> <span id="sumClasses" class="stat">0</span></div>
      </div>

      <div class="card">
        <h3>√âtablissement (<span id="yearStat">‚Äî</span>)</h3>
        <div id="effStaffStat" class="muted">Aucun param√©trage trouv√©.</div>
        <details id="effStaffDetails" class="hidden" style="margin-top:6px">
          <summary>Voir le d√©tail des classes</summary>
          <div id="effTableWrap"></div>
        </details>
      </div>

      <!-- ===== Uploader + Gestionnaire de documents am√©lior√© ===== -->
      <div class="card" id="uploaderCard">
        <h3>Documents partag√©s</h3>
        <div id="drop" class="drop">Glissez-d√©posez vos fichiers ici ou <button id="pick" class="btn" type="button">Parcourir‚Ä¶</button></div>
        <input id="fileInput" type="file" multiple class="hidden" />
        <div class="filetoolbar">
          <div class="filterchips" id="fileFilters">
            <button class="chip btn active" data-ftype="all">Tous <span class="muted" id="cnt_all">(0)</span></button>
            <button class="chip btn" data-ftype="pdf">PDF <span class="muted" id="cnt_pdf">(0)</span></button>
            <button class="chip btn" data-ftype="image">Images <span class="muted" id="cnt_image">(0)</span></button>
            <button class="chip btn" data-ftype="sheet">Tableurs <span class="muted" id="cnt_sheet">(0)</span></button>
            <button class="chip btn" data-ftype="doc">Docs <span class="muted" id="cnt_doc">(0)</span></button>
            <button class="chip btn" data-ftype="slide">Pr√©sentations <span class="muted" id="cnt_slide">(0)</span></button>
            <button class="chip btn" data-ftype="archive">Archives <span class="muted" id="cnt_archive">(0)</span></button>
            <button class="chip btn" data-ftype="other">Autres <span class="muted" id="cnt_other">(0)</span></button>
          </div>
          <div class="search"><input id="fileSearch" type="text" placeholder="Rechercher un document‚Ä¶"></div>
          <select id="fileSort" title="Trier">
            <option value="date_desc">Trier : Date ‚Üì</option>
            <option value="date_asc">Trier : Date ‚Üë</option>
            <option value="name_asc">Trier : Nom A‚ÜíZ</option>
            <option value="name_desc">Trier : Nom Z‚ÜíA</option>
            <option value="size_desc">Trier : Taille ‚Üì</option>
            <option value="size_asc">Trier : Taille ‚Üë</option>
          </select>
        </div>
        <div id="files" class="filegrid"></div>
        <div class="muted" style="margin-top:6px">PDF, images, Excel, etc. (multi-fichiers)</div>
      </div>

      <div class="card" id="chatCard">
        <h3>Forum <%= ((user && user.inspection)||'').toUpperCase() %> (temps r√©el)</h3>
<div class="wchat">
  <div class="w-header">
    <div class="w-avatar"><%= ((user && user.nom) || 'AP').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase() %></div>
    <div>
      <div class="w-name"><%= (user && user.nom) || '‚Äî' %></div>
      <div class="w-sub" id="presence">Connect√©s : ‚Äî</div>
    </div>
    <div style="margin-left:auto"><button class="btn" id="chatRefresh" type="button">‚Üª</button></div>
  </div>

  <div id="msgs" class="w-msgs"></div>
  <div id="typing" class="typing"></div>

  <!-- Barre ‚Äúr√©pondre √† ‚Ä¶‚Äù -->
  <div id="replyBar" class="w-replybar hidden" aria-live="polite">
    <div>
      <div class="name" id="replyName">‚Äî</div>
      <div class="snippet" id="replySnippet">‚Äî</div>
    </div>
    <button class="close" id="replyCancel" type="button">Annuler</button>
  </div>

  <form id="chatForm" class="w-input" autocomplete="off">
    <button class="icon" type="button" id="emojiBtn" title="Emoji">üôÇ</button>
    <input id="chatText" type="text" placeholder="Tapez un message‚Ä¶ (Entr√©e = envoyer, Shift+Entr√©e = ligne)">
    <input id="chatFile" type="file" class="hidden">
    <button class="icon" type="button" id="attachBtn" title="Joindre">üìé</button>
    <button class="send" type="submit" title="Envoyer">‚û§</button>
  </form>

  <div class="muted" style="margin-top:6px">Salon commun √† l‚Äôinspecteur et aux animateurs de l‚Äôinspection.</div>
</div>

        </div>
      </div>
    </aside>
  </div>
</div>

<!-- ============ MODALE PARAM√àTRES √âTABLISSEMENT ============ -->
<div class="modal" id="settingsModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="settingsTitle">
    <header>
      <div>
        <h3 id="settingsTitle" style="margin:0;">‚öôÔ∏è Param√®tres √©tablissement</h3>
        <div class="subtle">Ces r√©glages servent de base √† vos collectes (effectifs, personnel et baselines par classe / discipline).</div>
      </div>
      <div class="toolbar">
        <button class="btn" id="btnCloseSettings">Fermer</button>
      </div>
    </header>
    <div class="content">
      <div class="cols-modal">
        <!-- ===== Colonne gauche : Effectifs + Personnel ===== -->
        <section class="pane">
          <div class="hstack">
            <div>
              <label class="subtle">Ann√©e scolaire</label>
              <input id="yearInput" type="text" value="" style="padding:6px 8px;border:1px solid var(--b);border-radius:8px;width:160px" />
            </div>
            <div style="margin-left:auto;display:flex;gap:6px;align-items:flex-end">
              <button class="btn" type="button" id="btnPrintStaff">üñ® Imprimer personnel</button>
              <button class="btn" type="button" id="btnExportStaff">‚¨áÔ∏è Export personnel</button>
            </div>
          </div>

          <h4 style="margin:12px 0 6px">Effectifs par classe</h4>
          <div class="hstack">
            <button class="btn" type="button" id="btnLoadClassesFromPreset">‚Ü∫ Charger classes par d√©faut (inspection)</button>
            <button class="btn" type="button" id="btnAddEff">+ Ajouter une classe</button>
          </div>
          <div class="bwrap eff">
            <table class="tbl-mini" id="effTable">
  <colgroup><col><col><col><col><col></colgroup>
  <thead>
    <tr>
      <th style="text-align:left">Classe (base)</th>
      <th>Div.</th>
      <th>F</th>
      <th>G</th>
      <th></th>
    </tr>
  </thead>
  <tbody id="effTbody"></tbody>
</table>
          </div>

          <h4 style="margin:12px 0 6px">Personnel enseignant</h4>
          <div class="hstack">
            <button class="btn" type="button" id="btnAddStaff">+ Ajouter un enseignant</button>
            <button class="btn" type="button" id="btnOpenStaffExplorer2">üë©‚Äçüè´ Fichier complet</button>
          </div>
          <div class="bwrap staff">
            <table class="tbl-mini" id="staffTable">
              <colgroup> <col><col><col><col><col><col> </colgroup>
              <thead><tr>
                <th style="text-align:left">Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th><th>Obs.</th><th></th>
              </tr></thead>
              <tbody id="staffTbody"></tbody>
            </table>
          </div>
        </section>

        <!-- ===== Colonne droite : Baselines par Classe/Discipline ===== -->
        <section class="pane">
          <div class="hstack">
            <div>
              <label class="subtle">Cycle</label>
              <select id="bCycle">
                <option value="">‚Äî</option>
                <option value="premier">premier</option>
                <option value="second">second</option>
              </select>
            </div>
            <div>
              <label class="subtle">Sp√©cialit√©</label>
              <select id="bSpec"><option value="">‚Äî</option></select>
            </div>
            <div style="margin-left:auto;display:flex;gap:6px;flex-wrap:wrap">
              <button class="btn" id="btnSyncClasses">üîÅ Synchroniser classes depuis effectifs</button>
              <button class="btn" id="btnLoadBaselines">‚Üª Charger existants</button>
              <button class="btn" id="btnLoadBaselineDefaults">‚Ü∫ Charger d√©fauts</button>
            </div>
          </div>

          <div class="hstack">
            <div class="subtle">Classes (baselines)</div>
            <div style="margin-left:auto">
              <button class="btn ghost" id="btnAddClass">+ Classe</button>
              <button class="btn" id="btnRenameClass">‚úé Renommer</button>
              <button class="btn" id="btnDeleteClass">üóë Supprimer</button>
            </div>
          </div>

          <div style="display:grid;grid-template-columns:240px 1fr;gap:10px">
            <div class="classList" id="classList"></div>
            <div>
              <div class="hstack">
                <span class="chip" id="currentClassChip">‚Äî</span>
                <button class="btn" id="btnImportExpected">‚á¢ Importer disciplines attendues</button>
                <button class="btn" id="btnAddDisc">+ Discipline</button>
              </div>
              <div class="bwrap x">
                <table class="tbl-mini" id="bTable">
                  <thead>
                    <tr>
                      <th style="text-align:left">Discipline</th>
                      <th>Heures dues</th>
                      <th>Le√ßons pr√©vues</th>
                      <th>Le√ßons dig. pr√©v.</th>
                      <th>TP pr√©vus</th>
                      <th>TP dig. pr√©v.</th>
                      <th>Ens. en poste</th>
                      <th></th>
                    </tr>
                  </thead>
                  <tbody id="bTbody"></tbody>
                </table>
              </div>
              <div class="subtle" style="margin-top:6px">Ces valeurs seront <b>verrouill√©es</b> dans le formulaire de collecte (colonnes bleut√©es ¬´ d√ª ¬ª).</div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <footer>
      <div class="subtle">Astuce : commencez par choisir le <b>cycle</b> et la <b>sp√©cialit√©</b> √† droite, puis chargez les <b>classes par d√©faut</b> pour saisir vos effectifs.</div>
      <div style="display:flex;gap:8px">
        <button class="btn" id="btnClose2">Fermer</button>
        <button class="btn primary" id="btnSaveAll">üíæ Enregistrer et fermer</button>
      </div>
    </footer>
  </div>
</div>



<!-- ============ MODALE PURGE ============ -->
<div class="modal" id="purgeModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="purgeTitle">
    <header>
      <div>
        <h3 id="purgeTitle" style="margin:0;">üßπ Purger mes donn√©es</h3>
        <div class="subtle">Cette action est irr√©versible. Choisissez ce que vous souhaitez supprimer.</div>
      </div>
      <div class="toolbar">
        <button class="btn" id="btnClosePurge">Fermer</button>
      </div>
    </header>

    <div class="content" style="padding:12px">
      <div class="warn" style="margin-bottom:10px">
        ‚ö†Ô∏è <b>Attention</b> : la purge supprime d√©finitivement les donn√©es s√©lectionn√©es pour 
        <em><%= (user && user.etab) || '‚Äî' %></em> et l‚Äôutilisateur <em><%= (user && user.nom) || '‚Äî' %></em>.
      </div>

      <div class="card">
        <h3>Que voulez-vous supprimer ?</h3>
        <label><input type="checkbox" id="purgeCollectes" checked> Mes <b>collectes</b> (toutes √©valuations)</label>
        <label><input type="checkbox" id="purgeSettings"  checked> Mes <b>param√®tres √©tablissement</b> (effectifs, personnel, baselines)</label>
        <label><input type="checkbox" id="purgeFiles"     checked> Mes <b>documents partag√©s</b></label>
        <label><input type="checkbox" id="purgeChat"      checked> Mes <b>messages du forum</b></label>
      </div>

      <div class="muted" style="margin-top:8px">
        Astuce : d√©cochez ce que vous souhaitez conserver.
      </div>
    </div>

    <footer>
      <div class="subtle">Une confirmation vous sera demand√©e avant ex√©cution.</div>
      <div style="display:flex;gap:8px">
        <button class="btn" id="btnCancelPurge">Annuler</button>
        <button class="btn danger" id="btnDoPurge">üßπ Purger maintenant</button>
      </div>
    </footer>
  </div>
</div>



<!-- ===== MODALE EXPLORATEUR PERSONNEL (consultation fiche compl√®te) ===== -->
<div class="modal" id="staffExplorerModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="staffExplorerTitle">
    <header>
      <div>
        <h3 id="staffExplorerTitle" style="margin:0;">üë©‚Äçüè´ Fichier complet du personnel enseignant</h3>
        <div class="subtle">Recherche, impression, export CSV, et √©dition des classes/disciples tenues par chaque enseignant.</div>
      </div>
      <div class="toolbar">
        <input id="staffSearch" type="text" placeholder="Rechercher (nom, mati√®re, classe, discipline)" style="padding:6px 8px;border:1px solid var(--b);border-radius:8px;width:260px">
        <button class="btn" type="button" onclick="printStaff()">üñ® Imprimer</button>
        <button class="btn" type="button" onclick="exportStaffCSV()">‚¨áÔ∏è Export CSV</button>
        <button class="btn" type="button" id="btnCloseStaffExplorer">Fermer</button>
      </div>
    </header>
    <div class="content" style="padding:12px">
      <table class="grid-staff" id="staffExplorerTable">
        <thead>
  <tr>
    <th>Nom</th>
    <th>Pr√©nom</th>
    <th>Grade</th>
    <th>Matricule</th>
    <th>Mati√®re</th>
    <th>Statut</th>
    <th>T√©l√©phone</th>
    <th>Classes tenues</th>
    <th>Disciplines enseign√©es</th>
    <th>Obs.</th>
    <th></th>
  </tr>
</thead>

        <tbody id="staffExplorerTbody"></tbody>
      </table>
    </div>
    <footer>
      <div class="subtle">Astuce : cliquez sur üìÑ <span class="kbd">Fiche</span> pour compl√©ter classes et disciplines d‚Äôun enseignant.</div>
      <div><button class="btn" id="btnCloseStaffExplorer2">Fermer</button></div>
    </footer>
  </div>
</div>

<!-- ===== MODALE FICHE ENSEIGNANT (√©dition enrichie) ===== -->
<div class="modal" id="staffSheetModal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="staffSheetTitle">
    <header>
      <div>
        <h3 id="staffSheetTitle" style="margin:0;">üìÑ Fiche enseignant</h3>
        <div class="subtle">Renseignez les classes tenues et les disciplines enseign√©es. Ces infos appara√Ætront dans l‚Äôimpression et l‚Äôexport.</div>
      </div>
      <div class="toolbar">
        <button class="btn" id="btnCloseStaffSheet">Fermer</button>
      </div>
    </header>
    <div class="content">
      <div class="cols-modal" style="grid-template-columns:1fr 1fr">
        <section class="pane">
          <h4 style="margin:6px 0 8px">Identit√©</h4>
          <div class="bwrap">
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Nom & pr√©nom</label>
                <input id="ssNom" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Grade</label>
                <input id="ssGrade" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
              <div style="flex:1">
                <label class="subtle">Mati√®re</label>
                <input id="ssMatiere" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Statut</label>
                <input id="ssStatut" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
              </div>
            </div>
            <div>
              <label class="subtle">Observations</label>
              <textarea id="ssObs" style="width:100%;min-height:70px;padding:6px 8px;border:1px solid var(--b);border-radius:8px"></textarea>
            </div>
          </div>
        </section>

        <section class="pane">
  <h4 style="margin:6px 0 8px">Informations personnelles</h4>
  <div class="bwrap">
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">Pr√©nom</label>
        <input id="ssPrenom" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">Matricule</label>
        <input id="ssMatricule" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">Date de naissance</label>
        <input id="ssDateNaissance" type="date" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">Sexe</label>
        <select id="ssSexe" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
          <option value="">‚Äî</option>
          <option value="M">Masculin</option>
          <option value="F">F√©minin</option>
        </select>
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">T√©l√©phone</label>
        <input id="ssTelephone" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">Cat√©gorie</label>
        <input id="ssCategorie" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">R√©gion d'origine</label>
        <input id="ssRegionOrigine" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">D√©partement d'origine</label>
        <input id="ssDepartementOrigine" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">Arrondissement d'origine</label>
        <input id="ssArrondissementOrigine" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">Poste occup√©</label>
        <input id="ssPosteOccupe" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">Rang du poste</label>
        <input id="ssRangPoste" type="text" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
      <div style="flex:1">
        <label class="subtle">Date d'entr√©e dans la FP</label>
        <input id="ssDateEntreeFP" type="date" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
    <div class="hstack">
      <div style="flex:1">
        <label class="subtle">Date d'affectation</label>
        <input id="ssDateAffectation" type="date" style="width:100%;padding:6px 8px;border:1px solid var(--b);border-radius:8px">
      </div>
    </div>
  </div>
</section>

        <section class="pane">
          <h4 style="margin:6px 0 8px">Affectations</h4>
          <div class="bwrap">
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Classes tenues</label>
                <div id="ssClasses" style="display:flex;flex-wrap:wrap;gap:6px"></div>
              </div>
            </div>
            <div class="hstack">
              <div style="flex:1">
                <label class="subtle">Disciplines enseign√©es</label>
                <div id="ssDisciplines" style="display:flex;flex-wrap:wrap;gap:6px"></div>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <footer>
      <div class="subtle">Ces informations sont locales √† l‚Äô√©tablissement et √† l‚Äôann√©e en cours.</div>
      <div style="display:flex;gap:8px">
        <button class="btn" id="btnStaffSheetCancel">Annuler</button>
        <button class="btn primary" id="btnStaffSheetSave">üíæ Enregistrer</button>
      </div>
    </footer>
  </div>
</div>
<script src="/socket.io/socket.io.js"></script> // <!-- Assurez-vous que cette ligne reste AVANT le script qui suit -->
<script>
/******************** PURGE ********************/
const purgeModal = document.getElementById('purgeModal');
const btnOpenPurge = document.getElementById('btnOpenPurge');
const btnClosePurge = document.getElementById('btnClosePurge');
const btnCancelPurge = document.getElementById('btnCancelPurge');
const btnDoPurge = document.getElementById('btnDoPurge');

btnOpenPurge?.addEventListener('click', (e)=>{ e.preventDefault(); openModal(purgeModal); });
btnClosePurge?.addEventListener('click', ()=> closeModal(purgeModal));
btnCancelPurge?.addEventListener('click', ()=> closeModal(purgeModal));

async function doPurge(){
  const opts = {
    collectes: document.getElementById('purgeCollectes')?.checked ?? false,
    settings:  document.getElementById('purgeSettings')?.checked ?? false,
    files:     document.getElementById('purgeFiles')?.checked ?? false,
    chat:      document.getElementById('purgeChat')?.checked ?? false
  };
  if(!opts.collectes && !opts.settings && !opts.files && !opts.chat){
    alert('S√©lectionnez au moins un √©l√©ment √† supprimer.');
    return;
  }
  const labelParts = [];
  if(opts.collectes) labelParts.push('collectes');
  if(opts.settings)  labelParts.push('param√®tres √©tablissement');
  if(opts.files)     labelParts.push('documents partag√©s');
  if(opts.chat)      labelParts.push('messages du forum');

  const confirmTxt = `Confirmez-vous la suppression DEFINITIVE de : ${labelParts.join(', ')} ?`;
  if(!confirm(confirmTxt)) return;

  btnDoPurge.disabled = true;

  try{
    // Appel unique c√¥t√© serveur, avec flags (adapter le chemin si besoin)
    const res = await postJSON('/api/purge', { 
      etab: CONNECTED_USER.etab,
      userId: CONNECTED_USER.id,
      inspection: CONNECTED_USER.inspection,
      options: opts 
    });

    // Nettoyage c√¥t√© client (UI / caches)
    if(opts.settings){ SETTINGS_CACHE = null; }
    if(opts.files){ FILES_CACHE = []; updateFileCounters?.(); renderFiles?.(); }
    // On vide la collecte √† l‚Äô√©cran s‚Äôil y en a une affich√©e
    if(opts.collectes){
      formulaires.innerHTML = '';
      cycleTotalBloc.classList.add('hidden');
      sumClasses.textContent = '0';
      badgeClasses.classList.add('hidden');
    }

    alert(res?.message || 'Purge effectu√©e avec succ√®s.');
    closeModal(purgeModal);
    // Recharger pour repartir proprement
    location.reload();

  }catch(e){
    alert('Erreur lors de la purge : ' + (e?.message||e));
  }finally{
    btnDoPurge.disabled = false;
  }
}
btnDoPurge?.addEventListener('click', doPurge);



/* Polyfill ultra-robuste pour CSS.escape (MDN), si absent */
(function(global){
  if (global.CSS && typeof global.CSS.escape === "function") return;
  var CSS = global.CSS || (global.CSS = {});
  var _escape = function(value) {
    var string = String(value);
    var length = string.length;
    var index = -1;
    var codeUnit;
    var result = '';
    var firstCodeUnit = string.charCodeAt(0);
    while (++index < length) {
      codeUnit = string.charCodeAt(index);
      if (codeUnit === 0x0000) { result += "\uFFFD"; continue; }
      if ((codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit === 0x007F || (index === 0 && ((codeUnit >= 0x0030 && codeUnit <= 0x0039) || codeUnit === 0x002D || codeUnit === 0x002E)) || codeUnit === 0x0020 || codeUnit === 0x0021 || codeUnit === 0x0022 || codeUnit === 0x0023 || codeUnit === 0x0024 || codeUnit === 0x0025 || codeUnit === 0x0026 || codeUnit === 0x0027 || codeUnit === 0x0028 || codeUnit === 0x0029 || codeUnit === 0x002A || codeUnit === 0x002B || codeUnit === 0x002C || codeUnit === 0x002F || codeUnit === 0x003A || codeUnit === 0x003B || codeUnit === 0x003C || codeUnit === 0x003D || codeUnit === 0x003E || codeUnit === 0x003F || codeUnit === 0x0040 || codeUnit === 0x005B || codeUnit === 0x005C || codeUnit === 0x005D || codeUnit === 0x005E || codeUnit === 0x0060 || codeUnit === 0x007B || codeUnit === 0x007C || codeUnit === 0x007D || codeUnit === 0x007E) {
        result += "\\" + codeUnit.toString(16) + " ";
      } else {
        result += string.charAt(index);
      }
    }
    return result;
  };
  CSS.escape = _escape;
})(window);

function openModal(el){ el.classList.add('open'); el.setAttribute('aria-hidden','false'); }
function closeModal(el){ el.classList.remove('open'); el.setAttribute('aria-hidden','true'); }

document.querySelectorAll('.modal').forEach(m=>{
  m.addEventListener('click', (e)=>{ if(e.target===m) closeModal(m); });
});

document.addEventListener('keydown', (e)=>{
  if(e.key==='Escape'){ document.querySelectorAll('.modal.open').forEach(closeModal); }
});
/************************** SESSION **************************/
const CONNECTED_USER = <%- JSON.stringify({
  id: (user && user.id) || '',
  nom: (user && user.nom) || '',
  etab: (user && user.etab) || '',
  role: (user && user.role) || 'anim',
  inspection: (user && user.inspection) || 'artsplastiques',
  departement: (user && user.departement) || '‚Äî'
}) %>;

/******************** DOM (collecte) ********************/
const selCycle=document.getElementById('cycle');
const selSpec =document.getElementById('specialite');
const contSpec=document.getElementById('specialiteContainer');
const contEval=document.getElementById('evaluationContainer');
const btnPrefill=document.getElementById('btnPrefill');
const formulaires=document.getElementById('formulaires');
const cycleTotalBloc=document.getElementById('cycleTotalBloc');
const cycleTotalTitre=document.getElementById('cycleTotalTitre');
const cycleTotalTable=document.getElementById('cycleTotalTable');
const badgeClasses=document.getElementById('badgeClasses');
const sumSpec=document.getElementById('sumSpec');
const sumEval=document.getElementById('sumEval');
const sumClasses=document.getElementById('sumClasses');
const yearStat=document.getElementById('yearStat');
const effStaffStat=document.getElementById('effStaffStat');
const effStaffDetails=document.getElementById('effStaffDetails');
const effTableWrap=document.getElementById('effTableWrap');

/******************** CACHE PARAMS √âTABLISSEMENT ********************/
let SETTINGS_CACHE=null;

const STRICT_BASELINE = true; // ou : (CONNECTED_USER.role||'').toLowerCase()==='ap';
let BASELINE_INDEX = new Map(); // Map<base, Set<discipline>>

/******************** HELPERS API ********************/
async function getJSON(url){
  const r=await fetch(url,{credentials:'same-origin'});
  if(!r.ok) throw new Error('HTTP '+r.status);
  return r.json();
}
async function postJSON(url,body){
  const r=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify(body)});
  const data=await r.json().catch(()=>({}));
  if(!r.ok) throw new Error(data?.error||('HTTP '+r.status));
  return data;
}
async function postFirstOk(urls, body){
  let lastErr = null;
  for(const u of urls){
    try{ return await postJSON(u, body); }catch(e){ lastErr = e; }
  }
  throw lastErr || new Error('√âchec de l‚Äôenvoi');
}
function getSchoolYear(){
  const d=new Date(), y=d.getFullYear(), m=d.getMonth();
  return (m>=7)? `${y}-${y+1}` : `${y-1}-${y}`;
}

/***** Effectifs par classe (helper) *****/
function getClassEffectifByName(name){
  const list = SETTINGS_CACHE?.effectifs || [];
  const base = splitClassLabel(name).base.trim().toLowerCase();
  return list
    .filter(e => splitClassLabel(e.classe||'').base.trim().toLowerCase() === base)
    .reduce((s,e)=> s + (+e.filles||0) + (+e.garcons||0), 0);
}
/**
 * NOUVEAU HELPER : R√©cup√®re l'effectif pour une division sp√©cifique.
 * Prend en compte le label complet, ex: "1√®re Ann√©e DECO (2)".
 */
function getDivisionEffectifByLabel(label) {
  const list = SETTINGS_CACHE?.effectifs || [];
  const entry = list.find(e => (e.classe || '') === label);
  if (!entry) return 0; // Si la division n'est pas trouv√©e, retourne 0
  return (+entry.filles || 0) + (+entry.garcons || 0);
}


/******************** TABLES & CALCULS (collecte) ********************/
function tableHead(){
  return `
  <thead>
    <tr>
      <th rowspan="2" style="text-align:left">Module / Discipline</th>
      <th colspan="3">Couverture des heures</th>
      <th colspan="6">Couverture des programmes</th>
      <th colspan="6">R√©alisation des TP</th>
      <th colspan="3">R√©ussite des √©l√®ves</th>
      <th colspan="3">Assiduit√© et ponctualit√© des enseignants</th>
    </tr>
    <tr>
      <th>Heures dues</th><th>Heures faites</th><th>%</th>
      <th>Nbre de le√ßons pr√©vues</th><th>Nbre de le√ßons faites</th><th>%</th>
      <th>Nbre de le√ßons digitalis√©es pr√©vues</th><th>Nbre de le√ßons digitalis√©es faites</th><th>%</th>
      <th>Nbre pr√©vu</th><th>Nbre fait</th><th>%</th>
      <th>Nbre digitalis√© pr√©vu</th><th>Nbre digitalis√© fait</th><th>%</th>
      <th>Nbre d'√©l√®ves ayant compos√©</th><th>Nbre de moy ‚â• 10/20</th><th>% de r√©ussite</th>
      <th>Effectif des enseignants</th><th>En poste</th><th>%</th>
    </tr>
  </thead>`;
}
function lineHTML(nom){
  return `
  <tr>
    <td contenteditable="true">${nom}</td>
    ${Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="pct${i+1}">‚Äî</td>` : `<td><input type="number" class="val${i+1}" min="0"></td>` ).join('')}
  </tr>`;
}

/***** Pr√©-remplissage/caps avec effectifs *****/
/***** Pr√©-remplissage/caps avec effectifs *****/
function applyEffectifCapsAndPrefillFor(bloc){
  const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
  
  // CORRECTION : On utilise la nouvelle fonction pour obtenir l'effectif de la division EXACTE.
  const eff = getDivisionEffectifByLabel(cls);

  const rows = bloc.querySelectorAll('tbody tr:not(.totalRow)');
  rows.forEach(tr=>{
    const comp = tr.querySelector('.val16'); // "Nbre d'√©l√®ves ayant compos√©"
    const m10 = tr.querySelector('.val17');  // "Nbre de moy >= 10/20"
    
    if (comp){
      const v = +comp.value || 0;
      // On pr√©-remplit le champ avec l'effectif de la division si le champ est vide.
      if (eff > 0 && v === 0) comp.value = eff;
      // On s'assure que la valeur ne d√©passe jamais l'effectif de la division (le "cap").
      if (eff > 0 && +comp.value > eff) comp.value = eff;
    }
    // On s'assure que le nombre de moyennes > 10 ne d√©passe pas le nombre d'√©l√®ves ayant compos√©.
    if (m10 && comp && (+m10.value > +comp.value)) m10.value = comp.value;
  });
}
function applyEffectifCapsAndPrefill(){
  document.querySelectorAll('.classeBloc').forEach(applyEffectifCapsAndPrefillFor);
  recalcAll();
}
/* ==== Helpers libell√©s de classe avec divisions ==== */
function _clean(s){ return String(s||'').replace(/\s+/g,' ').trim(); }
function splitClassLabel(label){
  const raw=_clean(label);
  const m = raw.match(/\s*(?:\(|#|-|\/)\s*(\d+)\s*\)?\s*$/);
  if(!m) return { base: raw, division: 1, label: raw };
  const div = Number(m[1]||'1')||1;
  const base = _clean(raw.slice(0, m.index));
  return { base, division: div, label: `${base} (${div})` };
}
function makeClassLabel(base, division=1){ base=_clean(base); return (division && division!==1) ? `${base} (${division})` : base; }
function canonical(label){ return splitClassLabel(label).base; }

// Transforme BSTATE (par divisions) en "list" pour l'API baselines
function serializeBaselines(){
  const annee = (yearInput?.value || '').trim() || getSchoolYear();
  const cycle = (bCycle?.value || selCycle?.value || '').trim();
  const specialite = (bSpec?.value || selSpec?.value || '').trim().toUpperCase();
  if(!annee || !cycle || !specialite) return { annee:'', cycle:'', specialite:'', list: [] };

  const list = [];
  for(const [classLabel, rows] of BSTATE.entries()){
    const base = splitClassLabel(classLabel).base; // baseline par "base" (pas la division)
    (rows || []).forEach(r=>{
      const row = {
        classe: base,
        discipline: String(r.discipline||'').trim(),
        heuresDues: +r.heuresDues || 0,
        leconsPrevues: +r.leconsPrevues || 0,
        leconsDigPrevues: +r.leconsDigPrevues || 0,
        tpPrevus: +r.tpPrevus || 0,
        tpDigPrevus: +r.tpDigPrevus || 0,
        enseignantsPoste: +r.enseignantsPoste || 0
      };
      if(row.discipline) list.push(row);
    });
  }
  return { annee, cycle, specialite, list };
}

async function saveBaselinesReplace(){
  const { annee, cycle, specialite, list } = serializeBaselines();
  if(!annee || !cycle || !specialite) return;

  // 1) purge du couple courant
  await fetch(
    `/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cycle)}&specialite=${encodeURIComponent(specialite)}`,
    { method: 'DELETE', credentials: 'same-origin' }
  ).then(r=>r.json()).catch(()=>null);

  // 2) recr√©ation √† l‚Äôidentique
  if(list.length){
    await postJSON('/api/settings/baselines', { annee, cycle, specialite, list });
  }
}

async function saveAllAndClose(){
  try{
    const payload = {
      annee    : (yearInput?.value || '').trim() || getSchoolYear(),
      effectifs: collectEffectifs(),
      staff    : collectStaff()
    };

    // 1) Sauvegarde des param√®tres √©tablissement (ann√©e, effectifs, staff)
    const res = await postJSON('/api/settings', payload);

    // 2) Remplacement COMPLET des baselines du couple (ann√©e, cycle, sp√©cialit√©)
    //    => purge + r√©insertion exacte de ce qu‚Äôil y a dans la modale (BSTATE)
    await saveBaselinesReplace();

    alert(res?.message || 'Param√®tres enregistr√©s');
    // Mets √† jour le cache local
    SETTINGS_CACHE = { ...(SETTINGS_CACHE||{}), ...payload };

    // Ferme la modale et rafra√Æchis le r√©sum√© de droite si la fonction existe
    closeModal(settingsModal);
    try{ refreshSettingsSidebar?.(); }catch(_){}
  }catch(e){
    alert('Enregistrement param√®tres: ' + (e?.message||e));
  }
}

/***** NOUVEAU : helpers & chargeur collecte *****/
function uniq(arr){ return [...new Set(arr.map(s => String(s||'').trim()))]; }
async function getBaselinesCouple(cyc, spec){
  const annee = getSchoolYear();
  try{
    const rows = await getJSON(`/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    if (rows?.length) return rows;
  }catch(_){/* ignore */}
  try{
    const rows = await getJSON(`/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    return rows||[];
  }catch(_){ return []; }
}
async function getPresetClassesCouple(cyc, spec){
  try{
    const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    return r?.classes || [];
  }catch(_){ return []; }
}
async function buildCollecteFor(cyc, spec){
  formulaires.innerHTML=''; // On vide la zone

  if (!cyc || !spec) {
    cycleTotalBloc.classList.add('hidden');
    updateSummary();
    return;
  }

  // S'assurer que les param√®tres de l'√©tablissement sont charg√©s
  if (!SETTINGS_CACHE) {
    await refreshSettingsSidebar(); 
  }

  // 1. D'abord, on r√©cup√®re la liste des classes de base qui sont ATTENDUES pour ce couple.
  // C'est notre liste de r√©f√©rence pour le filtrage.
  const expectedBases = await getDefaultClassesFor(cyc, spec);
  
  if (!expectedBases.length) {
      console.warn(`Aucune classe de base n'est d√©finie pour le couple ${cyc} / ${spec}.`);
      cycleTotalBloc.classList.add('hidden');
      updateSummary();
      return;
  }

  // 2. On r√©cup√®re TOUS les effectifs configur√©s par l'utilisateur.
  const allConfiguredClasses = SETTINGS_CACHE?.effectifs || [];

  // 3. ON FILTRE ! C'est l'√©tape cl√©. On ne garde que les effectifs dont la "base"
  // fait partie de notre liste de r√©f√©rence.
  const relevantClasses = allConfiguredClasses.filter(eff => {
      const base = splitClassLabel(eff.classe || '').base;
      return expectedBases.includes(base);
  });

  if (!relevantClasses.length) {
    console.warn("Aucune classe n'est configur√©e dans les effectifs pour ce couple cycle/sp√©cialit√©.");
    cycleTotalBloc.classList.add('hidden');
    updateSummary();
    return;
  }

  // √Ä partir d'ici, le reste de la fonction travaille avec la bonne liste de classes (relevantClasses)
  const classLabels = [...new Set(relevantClasses.map(e => e.classe || ''))].filter(Boolean).sort();
  const annee = getSchoolYear();
  const baselines = await getBaselinesCouple(cyc, spec);
  // Index global base -> disciplines autoris√©es (pour filtrer affichage/envoi)
BASELINE_INDEX = new Map();
(baselines||[]).forEach(b=>{
  const base = String(b.classe||'').trim();
  const disc = String(b.discipline||'').trim();
  if(!base || !disc) return;
  if(!BASELINE_INDEX.has(base)) BASELINE_INDEX.set(base, new Set());
  BASELINE_INDEX.get(base).add(disc);
});

  let collecte = null;
  try {
    collecte = await getJSON(`/api/collecte/form-ap?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
  } catch(_) { /* Ignore */ }
  
  const previousDataByClass = new Map((collecte?.classes||[]).map(c => [String(c.classe||c.nom).trim(), c.disciplines || []]));

  // 4. On construit les blocs de formulaire uniquement pour les classes pertinentes
  classLabels.forEach(label => {
    const { base } = splitClassLabel(label);
    const baselineRows = baselines.filter(b => String(b.classe).trim() === base);
    
    let rows = baselineRows.map(b => ({
      discipline: b.discipline, hD: +b.heuresDues||0, lp: +b.leconsPrevues||0, ldp: +b.leconsDigPrevues||0,
      tp: +b.tpPrevus||0, tdp: +b.tpDigPrevus||0, effTot: +b.enseignantsPoste||0
    }));

   const previousDisciplines = previousDataByClass.get(label);
if (previousDisciplines && previousDisciplines.length) {
  const prevMap = new Map(previousDisciplines.map(d => [String(d.nom||'').trim(), d]));
  rows = rows.map(r=>{
    const key = String(r.discipline||'').trim();
    const prev = prevMap.get(key);
    // On ne copie que les valeurs des disciplines PR√âSENTES dans la baseline
    if(prev){
      return {
        ...r,
        hF:+prev.hF||r.hF, lf:+prev.lf||r.lf, ldf:+prev.ldf||r.ldf,
        tf:+prev.tf||r.tf,  tdf:+prev.tdf||r.tdf,
        comp:+prev.comp||r.comp, m10:+prev.m10||r.m10,
        effPos:+prev.effPos||r.effPos
      };
    }
    return r;
  });
  // Surtout ne pas ajouter les anciennes disciplines hors baseline
}

    
    createClassBlockFromAPI(label, rows);
  });

  buildCycleTotalTable();
  applyEffectifCapsAndPrefill();
  updateSummary();
}

/***** Cr√©ation des blocs de classe *****/
function createClassBlockFromAPI(classe, rows){
  const wrap=document.createElement('section');
  wrap.className='bloc classeBloc';
  const sp = splitClassLabel(classe);
  wrap.dataset.classBase = sp.base;
  wrap.dataset.division  = String(sp.division||1);

  wrap.innerHTML = `
  <header>
    <h2>${classe}</h2>
    <div class="actions">
      <button class="btn js-add-division" type="button">+ Ajouter une division</button>
      <button class="btn js-remove-division" type="button" style="display:none">Supprimer cette division</button>
      <button class="btn" onclick="addLine(this)">+ Ajouter une discipline</button>
      <button class="btn" onclick="resetDefaults(this)">‚Ü∫ Disciplines par d√©faut</button>
    </div>
  </header>
  <input type="hidden" data-field="className" value="${classe}">
  <table>${tableHead()}<tbody></tbody></table>`;

  const tbody=wrap.querySelector('tbody');
  (rows||[]).forEach(r=>{
    const holder=document.createElement('tbody');
    holder.innerHTML = lineHTML(r.discipline || r.nom || '');
    const tr = holder.firstElementChild;
    tbody.appendChild(tr);
    const setFixed = (i,val)=>{
      const input = tr.querySelector(`.val${i}`);
      if(!input) return; input.value = +val||0; input.readOnly=true; input.classList.add('fixed'); input.title='Valeur cible (baseline)';
    };
    setFixed(1, r.hD); setFixed(4, r.lp); setFixed(7, r.ldp); setFixed(10, r.tp); setFixed(13, r.tdp); setFixed(19, r.effTot);
    const setDone=(i,val)=>{ const input = tr.querySelector(`.val${i}`); if(input) input.value = +val||0; };
    setDone(2, r.hF); setDone(5, r.lf); setDone(8, r.ldf); setDone(11, r.tf); setDone(14, r.tdf); setDone(16, r.comp); setDone(17, r.m10); setDone(20, r.effPos);
  });
  const total=document.createElement('tr');
  total.className='totalRow';
  total.innerHTML = `<td><strong>total ${classe}</strong></td>` +
    Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="total pct${i+1}"><strong>‚Äî</strong></td>` : `<td class="total sum sum${i+1}"><strong>0</strong></td>` ).join('');
  tbody.appendChild(total);
  wrap.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input',recalcAll));
  formulaires.appendChild(wrap);
  applyEffectifCapsAndPrefillFor(wrap);
}
/* ==== Multi-divisions : dupliquer / renum√©roter / supprimer ==== */
function renumberDivision(block, base, div){
  block.dataset.classBase = base;
  block.dataset.division  = String(div);
  const h2 = block.querySelector('h2');
  const label = makeClassLabel(base, div);
  if(h2) h2.textContent = label;
  const hidden = block.querySelector('input[data-field="className"]');
  if(hidden) hidden.value = label;
  const del = block.querySelector('.js-remove-division');
  if(del) del.style.display = (div>1) ? '' : 'none';
}

function addDivisionFromBlock(block){
  const base = block.dataset.classBase || canonical(block.querySelector('h2')?.textContent||'');
  const cont = block.parentElement;
  const siblings = cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`);
  const nextDiv = siblings.length + 1;

  const clone = block.cloneNode(true);
  clone.querySelectorAll('input[type=number]').forEach(i=> i.value='');
  clone.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
    tr.querySelectorAll('input').forEach(inp=>{ if(!inp.readOnly) inp.value=''; });
  });
  cont.insertBefore(clone, block.nextSibling);
  clone.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input', recalcAll));
  renumberDivision(clone, base, nextDiv);
  applyEffectifCapsAndPrefillFor(clone);
  recalcAll();
}

function removeDivisionFromBlock(block){
  const base = block.dataset.classBase || canonical(block.querySelector('h2')?.textContent||'');
  const cont = block.parentElement;
  const all  = [...cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`)];
  if(all.length<=1) return; 
  block.remove();
  [...cont.querySelectorAll(`.classeBloc[data-class-base="${CSS.escape(base)}"]`)]
    .forEach((b,i)=> renumberDivision(b, base, i+1));
  recalcAll();
}

const pctTxt=(a,b)=> a>0 ? ((b/a)*100).toFixed(2)+' %' : '‚Äî';

/* === recalculs (lignes + totaux classe) avec plafonds === */
/* === recalculs (lignes + totaux classe) avec plafonds === */
/* === recalculs (lignes + totaux classe) avec plafonds === */
function recalcAll(){
  // Calcule les pourcentages pour chaque ligne de discipline (inchang√©)
  document.querySelectorAll('.classeBloc tbody tr:not(.totalRow)').forEach(tr=>{
    const v=i=> tr.querySelector(`.val${i}`)?.valueAsNumber||0;
    [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]
      .forEach(([a,b,p])=> tr.querySelector(`.pct${p}`).textContent=pctTxt(v(a),v(b)));
  });

  // Calcule les totaux pour chaque bloc de classe/division (avec la correction)
  document.querySelectorAll('.classeBloc table').forEach(tbl=>{
    const bloc=tbl.closest('.classeBloc');
    const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
    
    // On r√©cup√®re l'effectif de la division, qui servira de PLAFOND
    const eff = getDivisionEffectifByLabel(cls);

    const rows=[...tbl.tBodies[0].rows];
    const total=rows[rows.length-1];
    const data=rows.slice(0,-1);
    const sum=n => data.reduce((acc,tr)=> acc+(+tr.querySelector(`.val${n}`)?.value||0),0);
    
    // Les totaux pour les autres colonnes restent des sommes simples
    [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[19,20,21]].forEach(([a,b,p])=>{
      const A=sum(a), B=sum(b);
      total.querySelector(`.sum${a}`).innerHTML=`<strong>${A}</strong>`;
      total.querySelector(`.sum${b}`).innerHTML=`<strong>${B}</strong>`;
      total.querySelector(`.pct${p}`).innerHTML=`<strong>${pctTxt(A,B)}</strong>`;
    });

    // --- CORRECTION FINALE SELON VOTRE LOGIQUE ---

    // 1. On calcule la SOMME de la colonne "√©l√®ves ayant compos√©".
    const sumComp = sum(16);

    // 2. On prend le minimum entre cette somme et l'effectif total de la classe.
    // C'est le "plafonnement" que vous avez demand√©.
    const compTot = (eff > 0) ? Math.min(sumComp, eff) : sumComp;

    // 3. Le total des √©l√®ves ayant la moyenne est la somme de la colonne, plafonn√©e par le nouveau total.
    const m10Tot = Math.min(sum(17), compTot);

    // On met √† jour le HTML avec les valeurs correctes
    total.querySelector('.sum16').innerHTML = `<strong>${compTot}</strong>`;
    total.querySelector('.sum17').innerHTML = `<strong>${m10Tot}</strong>`;
    total.querySelector('.pct18').innerHTML = `<strong>${pctTxt(compTot, m10Tot)}</strong>`;
  });
  
  // Le calcul du total de cycle reste inchang√©
  calcCycleTotal();
}

function addLine(btn){
  const bloc  = btn.closest('.classeBloc');
  const tbody = bloc.querySelector('tbody');
  const total = tbody.querySelector('.totalRow');

  const holder = document.createElement('tbody');
  holder.innerHTML = lineHTML('Nouvelle discipline');
  const tr = holder.firstElementChild;
  tbody.insertBefore(tr, total);

  tr.querySelectorAll('input').forEach(i=> i.addEventListener('input', recalcAll));

  // ‚ûú effectif de la division (ex: "4√®me Ann√©e DECO (2)"), pas de la base
  const clsLabel = bloc.querySelector('h2')?.textContent?.trim() || '';
  const effDiv   = getDivisionEffectifByLabel(clsLabel);
  if (effDiv > 0) tr.querySelector('.val16').value = effDiv;

  recalcAll();
}


async function resetDefaults(btn){
  const bloc = btn.closest('.classeBloc');
  const label = bloc.querySelector('h2').textContent.trim();
  const { base } = splitClassLabel(label);
  const spec = selSpec.value, cyc = selCycle.value, annee = getSchoolYear();

  let rows = [];
  try{
    const data = await getJSON(`/api/collecte/form-ap?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const cls = (data?.classes||[]).find(c=> String(c.classe).trim()===label);
    if(cls) rows = cls.disciplines||[];
  }catch(_){}

  if(!rows.length){
    const bl = await getBaselinesCouple(cyc, spec);
    rows = bl.filter(b=> String(b.classe).trim()===base)
             .map(b=>({ discipline:b.discipline, hD:+b.heuresDues||0, lp:+b.leconsPrevues||0, ldp:+b.leconsDigPrevues||0,
                        tp:+b.tpPrevus||0, tdp:+b.tpDigPrevus||0, effTot:+b.enseignantsPoste||0 }));
  }
  if(!rows.length) return;

  const tbody=bloc.querySelector('tbody');
  [...tbody.querySelectorAll('tr:not(.totalRow)')].forEach(tr=> tr.remove());
  rows.forEach(r=>{
    const holder=document.createElement('tbody');
    holder.innerHTML = lineHTML(r.discipline||'');
    const tr = holder.firstElementChild;
    tbody.insertBefore(tr, tbody.querySelector('.totalRow'));
    const setFixed = (i,val)=>{ const input = tr.querySelector(`.val${i}`); if(!input) return; input.value=+val||0; input.readOnly=true; input.classList.add('fixed'); };
    setFixed(1,r.hD); setFixed(4,r.lp); setFixed(7,r.ldp); setFixed(10,r.tp); setFixed(13,r.tdp); setFixed(19,r.effTot);
  });
  bloc.querySelectorAll('input[type=number]').forEach(i=> i.addEventListener('input',recalcAll));
  applyEffectifCapsAndPrefillFor(bloc);
  recalcAll();
}

/***** Total / moyenne du cycle *****/
function buildCycleTotalTable(){
  cycleTotalTitre.textContent=`Total/Moyenne ${selCycle.value==='premier'?'1er':'2nd'} cycle`;
  cycleTotalTable.innerHTML=tableHead()+"<tbody><tr class=\"cycleRow\"></tr></tbody>";
  const row=cycleTotalTable.querySelector('.cycleRow');
  row.innerHTML = `<td><strong>${cycleTotalTitre.textContent}</strong></td>` +
    Array.from({length:21}).map((_,i)=> (i+1)%3===0 ? `<td class="cycle pct${i+1}"><strong>‚Äî</strong></td>` : `<td class="cycle sum sum${i+1}"><strong>0</strong></td>` ).join('');
  cycleTotalBloc.classList.remove('hidden');
}
function calcCycleTotal(){
  const row = cycleTotalTable.querySelector('.cycleRow');
  if(!row) return;

  const totals = Array(22).fill(0);

  // ‚ûú on additionne les cellules de la "totalRow" de chaque bloc (division)
  document.querySelectorAll('.classeBloc table').forEach(tbl=>{
    const trow = tbl.tBodies[0].querySelector('.totalRow');
    if(!trow) return;
    const read = i => Number((trow.querySelector(`.sum${i}`)?.textContent||'').replace(/\s/g,''))||0;

    // colonnes somme simples
    [1,2,4,5,7,8,10,11,13,14,19,20].forEach(n => totals[n] += read(n));

    // colonnes "R√©ussite" (d√©j√† capp√©es au niveau du bloc)
    totals[16] += read(16);   // √âl√®ves ayant compos√©
    totals[17] += read(17);   // Moy >= 10
  });

  // maj des % de la ligne cycle
  [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]].forEach(([a,b,p])=>{
    const pct = (d,n)=> d>0 ? ((n/d)*100).toFixed(2)+' %' : '‚Äî';
    row.querySelector(`.sum${a}`).innerHTML = `<strong>${totals[a]}</strong>`;
    row.querySelector(`.sum${b}`).innerHTML = `<strong>${totals[b]}</strong>`;
    row.querySelector(`.pct${p}`).innerHTML = `<strong>${pct(totals[a], totals[b])}</strong>`;
  });
}


/******************** EXPORT / SUBMIT ********************/
function headerCSV(){
  return ['Classe','Discipline','Heures dues','Heures faites','% Heures','Le√ßons pr√©vues','Le√ßons faites','% Le√ßons','Le√ßons digit. pr√©v.','Le√ßons digit. faites','% Le√ßons digit.','TP pr√©vus','TP faits','% TP','TP digit. pr√©v.','TP digit. faits','% TP digit.',"√âl√®ves comp.","Moy ‚â• 10/20","% r√©ussite","Eff. ens.","En poste","% poste"];
}
function v(tr, cls){ const el=tr.querySelector(cls); return el?(+el.value||0):0; }
function pctNum(a,b){ return a>0 ? ((b/a)*100).toFixed(2) : ''; }
function exportCSV(){
  const out=[]; out.push(headerCSV());
  document.querySelectorAll('.classeBloc').forEach(bloc=>{
    const cls=bloc.querySelector('h2').textContent; const rows=[...bloc.querySelectorAll('tbody tr:not(.totalRow)')];
    rows.forEach(tr=>{
      out.push([cls, tr.cells[0].textContent.trim(), v(tr,'.val1'), v(tr,'.val2'), pctNum(v(tr,'.val1'),v(tr,'.val2')),
        v(tr,'.val4'), v(tr,'.val5'), pctNum(v(tr,'.val4'),v(tr,'.val5')),
        v(tr,'.val7'), v(tr,'.val8'), pctNum(v(tr,'.val7'),v(tr,'.val8')),
        v(tr,'.val10'),v(tr,'.val11'),pctNum(v(tr,'.val10'),v(tr,'.val11')),
        v(tr,'.val13'),v(tr,'.val14'),pctNum(v(tr,'.val13'),v(tr,'.val14')),
        v(tr,'.val16'),v(tr,'.val17'),pctNum(v(tr,'.val16'),v(tr,'.val17')),
        v(tr,'.val19'),v(tr,'.val20'),pctNum(v(tr,'.val19'),v(tr,'.val20'))
      ]);
    });
  });
  const cyc=cycleTotalTitre.textContent, row=cycleTotalTable.querySelector('.cycleRow');
  if(row){
    const t = i => {
      const raw = row.querySelector(`.sum${i}`)?.textContent?.trim() ?? '';
      const n = Number(raw.replace(/\s/g,''));
      return Number.isFinite(n) ? n : 0;
    };
    const P=b=> row.querySelector(`.pct${b}`).textContent.replace('%','').trim();
    out.push([cyc,'', t(1),t(2),P(3), t(4),t(5),P(6), t(7),t(8),P(9), t(10),t(11),P(12), t(13),t(14),P(15), t(16),t(17),P(18), t(19),t(20),P(21)]);
  }
  const csv=out.map(r=>r.map(x=>{ const s=String(x??''); return /[",;\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }).join(';')).join('\n');
  const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'});
  const url=URL.createObjectURL(blob);
  const a=document.createElement('a');
  const spec=selSpec.value||'spec';
  const cycLabel=selCycle.value==='premier'?'1er-cycle':'2nd-cycle';
  a.href=url; a.download=`collecte_${cycLabel}_${spec}.csv`;
  document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}

function buildCarteScolairePayload(){
  const evaluation = +document.getElementById('evaluation').value || null;
  const payload = {
    meta: {
      inspection: CONNECTED_USER.inspection,
      etablissement: CONNECTED_USER.etab,
      animateur: CONNECTED_USER.nom,
      departement: CONNECTED_USER.departement,
      annee: SETTINGS_CACHE?.annee || getSchoolYear(),
      cycle: selCycle.value || '',
      specialite: selSpec.value || '',
      evaluation: evaluation,
      generatedAt: new Date().toISOString()
    },
    effectifs: SETTINGS_CACHE?.effectifs || [],
    staff: SETTINGS_CACHE?.staff || [],
    classes: []
  };
  document.querySelectorAll('.classeBloc').forEach(bloc=>{
    const cls=bloc.querySelector('h2')?.textContent?.trim(); if(!cls) return;
    const classe={ nom:cls, disciplines:[] };
    bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
      const val=i=> tr.querySelector(`.val${i}`)?.valueAsNumber||0;
      const nom=tr.cells[0].textContent.trim(); if(!nom) return;
      classe.disciplines.push({
        nom,
        heuresDues:val(1), heuresFaites:val(2),
        leconsPrevues:val(4), leconsFaites:val(5),
        leconsDigPrevues:val(7), leconsDigFaites:val(8),
        tpPrevus:val(10), tpFaits:val(11),
        tpDigPrevus:val(13), tpDigFaits:val(14),
        elevesComposants:val(16), elevesMoySup10:val(17),
        effTot:val(19), effPos:val(20)
      });
    });
    if(classe.disciplines.length) payload.classes.push(classe);
  });
  return payload;
}

async function soumettreCarteScolaire(){
  if(!selCycle.value) return alert('S√©lectionnez un cycle.');
  if(!selSpec.value) return alert('S√©lectionnez une sp√©cialit√©.');
  const evaluation = +document.getElementById('evaluation').value || null;
  if(!evaluation) return alert("S√©lectionnez une √©valuation.");

  const carte = buildCarteScolairePayload();
  try{
    document.getElementById('btnSendCarteDirect').disabled = true;
    const res = await postFirstOk(
      ['/api/carte/submit', '/api/inspecteur/carte-scolaire', '/api/carte'], 
      carte
    );
    if(typeof io!=='undefined' && window.socket){
      window.socket.emit('carte:send', {ok:true, meta: carte.meta});
    }
    alert(res?.message || 'Carte scolaire envoy√©e √† l‚Äôinspecteur.');
  }catch(e){
    alert('Envoi de la carte: '+ e.message);
  }finally{
    document.getElementById('btnSendCarteDirect').disabled = false;
  }
}

let sending=false;
function groupCollecteByBase(classList){
  const byBase = new Map();
  for(const c of classList){
    const base = splitClassLabel(c.nom).base;
    if(!byBase.has(base)) byBase.set(base, new Map());
    const dmap = byBase.get(base);
    for(const d of (c.disciplines||[])){
      const key = String(d.nom||d.discipline||'').trim();
      if(!key) continue;
      if(!dmap.has(key)){
        dmap.set(key, { nom:key, hD:0,hF:0,lp:0,lf:0,ldp:0,ldf:0,tp:0,tf:0,tdp:0,tdf:0,comp:0,m10:0,effTot:0,effPos:0 });
      }
      const t = dmap.get(key);
      t.hD  += +d.hD  || +d.heuresDues  || 0;
      t.hF  += +d.hF  || +d.heuresFaites|| 0;
      t.lp  += +d.lp  || +d.leconsPrevues||0;
      t.lf  += +d.lf  || +d.leconsFaites ||0;
      t.ldp += +d.ldp || +d.leconsDigPrevues||0;
      t.ldf += +d.ldf || +d.leconsDigFaites ||0;
      t.tp  += +d.tp  || +d.tpPrevus  || 0;
      t.tf  += +d.tf  || +d.tpFaits   || 0;
      t.tdp += +d.tdp || +d.tpDigPrevus||0;
      t.tdf += +d.tdf || +d.tpDigFaits ||0;
      t.comp+= +d.comp|| +d.elevesComposants||0;
      t.m10 += +d.m10 || +d.elevesMoySup10 ||0;
      t.effTot += +d.effTot || 0;
      t.effPos += +d.effPos || 0;
    }
  }
  return [...byBase.entries()].map(([base,discMap])=>({ nom: base, disciplines: [...discMap.values()] }));
}

async function soumettre(){
  if(window.sending) return;
  const evalNum = +document.getElementById('evaluation').value;
  if(!selCycle.value || !selSpec.value || !evalNum) {
    return alert('Veuillez s√©lectionner un cycle, une sp√©cialit√© et une √©valuation.');
  }

  window.sending = true;
  document.getElementById('btnSoumettre').disabled = true;

  const payload = {
    cycle: selCycle.value,
    specialite: selSpec.value,
    evaluation: evalNum,
    etablissement: CONNECTED_USER.etab,
    animateur: CONNECTED_USER.nom,
    departement: CONNECTED_USER.departement,
    classes: [], // Ce tableau contiendra les donn√©es PAR DIVISION
    effectifs: [],
    staff: (SETTINGS_CACHE?.staff || []),
    annee: (SETTINGS_CACHE?.annee || getSchoolYear())
  };

  const displayedClasses = new Set();
  
  // On collecte les donn√©es de chaque bloc/division affich√©
  document.querySelectorAll('.classeBloc').forEach(bloc => {
    const cls = bloc.querySelector('h2')?.textContent?.trim();
    if (!cls) return;
    
    displayedClasses.add(cls);
    
    const classeData = { nom: cls, disciplines: [] };
    bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr => {
      const val = i => tr.querySelector(`.val${i}`)?.valueAsNumber || 0;
      const nom = tr.cells[0].textContent.trim();
      if (!nom) return;
      
      classeData.disciplines.push({
        nom, hD:val(1), hF:val(2), lp:val(4), lf:val(5), ldp:val(7), ldf:val(8),
        tp:val(10), tf:val(11), tdp:val(13), tdf:val(14),
        comp:val(16), m10:val(17), effTot:val(19), effPos:val(20)
      });
    });
    payload.classes.push(classeData);
  });

  // On filtre les effectifs pour n'envoyer que ceux des divisions concern√©es
  if(SETTINGS_CACHE && SETTINGS_CACHE.effectifs){
    payload.effectifs = SETTINGS_CACHE.effectifs.filter(eff => displayedClasses.has(eff.classe));
  }
  
  try {
    // Ce payload d√©taill√© est envoy√© au serveur
    const r = await fetch('/collecte', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload), credentials:'same-origin' });
    const data = await r.json().catch(()=>({}));
    if(!r.ok) throw new Error(data?.error || 'Erreur serveur');

    // Le reste de la logique ne change pas
    if(document.getElementById('chkSendCarte')?.checked) {
      await soumettreCarteScolaire();
    }

    alert(data.message || 'Fiche enregistr√©e avec succ√®s.');
    location.href = '/collecte/mes';

  } catch(e) {
    alert('Erreur lors de la soumission : ' + e.message);
  } finally {
    window.sending = false;
    document.getElementById('btnSoumettre').disabled = false;
  }
}
/******************** Uploader & Chat ********************/
const drop = document.getElementById('drop');
const pick = document.getElementById('pick');
const fileInput = document.getElementById('fileInput');
const filesBox = document.getElementById('files');
let FILES_CACHE = [];
let FILES_FILTER = 'all';
let FILES_QUERY = '';
let FILES_SORT = 'date_desc';
const fileFilters = document.getElementById('fileFilters');
const fileSearch = document.getElementById('fileSearch');
const fileSort = document.getElementById('fileSort');

pick.addEventListener('click', ()=> fileInput.click());
['dragenter','dragover'].forEach(ev=> drop.addEventListener(ev, e=>{ e.preventDefault(); e.stopPropagation(); drop.classList.add('drag'); }));
['dragleave','drop'].forEach(ev=> drop.addEventListener(ev, e=>{ e.preventDefault(); e.stopPropagation(); drop.classList.remove('drag'); }));
drop.addEventListener('drop', e=> handleFiles(e.dataTransfer.files));
fileInput.addEventListener('change', e=> handleFiles(e.target.files));

function extOf(name){ const m=String(name||'').toLowerCase().match(/\.([a-z0-9]+)$/); return m?m[1]:''; }
function kindOf(ext){
  if(['pdf'].includes(ext)) return 'pdf';
  if(['png','jpg','jpeg','gif','webp','bmp','svg'].includes(ext)) return 'image';
  if(['xls','xlsx','csv','ods'].includes(ext)) return 'sheet';
  if(['doc','docx','odt','txt','rtf','md'].includes(ext)) return 'doc';
  if(['ppt','pptx','odp'].includes(ext)) return 'slide';
  if(['zip','rar','7z','tar','gz'].includes(ext)) return 'archive';
  return 'other';
}
function iconOf(kind){ return { pdf:'üìï', image:'üñºÔ∏è', sheet:'üìä', doc:'üìù', slide:'üìΩÔ∏è', archive:'üì¶', other:'üìÑ' }[kind]||'üìÑ'; }
function fmtSize(b){ b=+b||0; if(b<1024) return b+' o'; if(b<1024*1024) return (b/1024).toFixed(1)+' Ko'; if(b<1024*1024*1024) return (b/1024/1024).toFixed(1)+' Mo'; return (b/1024/1024/1024).toFixed(2)+' Go'; }
function normalizeFile(f){
  const name=f.name||f.filename||'document';
  const url=f.url||f.href||'#';
  const size=f.size||0;
  const uploadedAt = Date.parse(f.uploadedAt||f.mtime||f.date||f.updatedAt||'')||0;
  const uploader = f.uploader||f.author||'';
  const ext = extOf(name); const kind = kindOf(ext);
  return { name, url, size, uploadedAt, uploader, ext, kind };
}
function renderFiles(){
  let list = FILES_CACHE.slice();
  if(FILES_FILTER!=='all') list = list.filter(f=> f.kind===FILES_FILTER);
  if(FILES_QUERY) list = list.filter(f=> (f.name||'').toLowerCase().includes(FILES_QUERY));
  list.sort((a,b)=>{
    switch(FILES_SORT){
      case 'date_asc':  return (a.uploadedAt||0)-(b.uploadedAt||0);
      case 'name_asc':  return (a.name||'').localeCompare(b.name||'');
      case 'name_desc': return (b.name||'').localeCompare(a.name||'');
      case 'size_desc': return (b.size||0)-(a.size||0);
      case 'size_asc':  return (a.size||0)-(b.size||0);
      default:          return (b.uploadedAt||0)-(a.uploadedAt||0);
    }
  });

  filesBox.innerHTML = '';
  if(!list.length){
    filesBox.innerHTML = '<div class="muted" style="padding:6px">Aucun document.</div>';
    return;
  }

  list.forEach(f=>{
    const d = new Date(f.uploadedAt || Date.now());
    const subBits = [ f.ext ? f.ext.toUpperCase() : '', fmtSize(f.size), isNaN(d.getTime()) ? '' : d.toLocaleDateString(), f.uploader ? ('par ' + f.uploader) : '' ].filter(Boolean);
    const card = document.createElement('div'); card.className='filecard';
    const icon = document.createElement('div'); icon.className='fileicon'; icon.textContent = iconOf(f.kind);
    const meta = document.createElement('div'); meta.className='filemeta';
    const nameDiv = document.createElement('div'); nameDiv.className='name';
    const a = document.createElement('a'); a.href=f.url; a.target="_blank"; a.rel="noopener noreferrer"; a.textContent = f.name||'document';
    nameDiv.appendChild(a);
    const sub = document.createElement('div'); sub.className='sub';
    subBits.forEach(bit=>{ const span=document.createElement('span'); span.textContent=String(bit); sub.appendChild(span); });
    meta.appendChild(nameDiv); meta.appendChild(sub);
    card.appendChild(icon); card.appendChild(meta);
    filesBox.appendChild(card);
  });
}
function updateFileCounters(){
  const counters = {all:FILES_CACHE.length,pdf:0,image:0,sheet:0,doc:0,slide:0,archive:0,other:0};
  FILES_CACHE.forEach(f=> counters[f.kind] = (counters[f.kind]||0)+1);
  Object.keys(counters).forEach(k=>{ const el=document.getElementById('cnt_'+k); if(el) el.textContent = `(${counters[k]||0})`; });
}
function setActiveFilterButton(){ fileFilters.querySelectorAll('[data-ftype]').forEach(btn=>{ btn.classList.toggle('active', btn.getAttribute('data-ftype')===FILES_FILTER); }); }
fileFilters.addEventListener('click', e=>{ const btn=e.target.closest('[data-ftype]'); if(!btn) return; FILES_FILTER = btn.getAttribute('data-ftype')||'all'; setActiveFilterButton(); renderFiles(); });
fileSearch.addEventListener('input', ()=>{ FILES_QUERY=(fileSearch.value||'').trim().toLowerCase(); renderFiles(); });
fileSort.addEventListener('change', ()=>{ FILES_SORT=fileSort.value; renderFiles(); });
async function handleFiles(fileList){
  if(!fileList || !fileList.length) return;
  const fd = new FormData();
  [...fileList].forEach(f=> fd.append('files', f));
  try{
    const r = await fetch('/fichiers/upload', { method:'POST', body:fd, credentials:'same-origin', headers:{ 'Accept':'application/json' } });
    const data = await r.json();
    if(!r.ok) throw new Error(data?.error||'Upload √©chou√©');
    const added = (data.files||[]).map(normalizeFile);
    FILES_CACHE = [...added, ...FILES_CACHE];
    updateFileCounters();
    renderFiles();
  }catch(e){ alert('Upload: '+e.message); }
}
async function refreshFiles(){
  try{ const r=await fetch('/fichiers/list',{credentials:'same-origin'}); if(!r.ok) return; const list=await r.json(); FILES_CACHE = (list||[]).map(normalizeFile); updateFileCounters(); renderFiles(); }catch(_) {}
}

/* ====== CHAT (nouveau rendu & reply) ====== */
const chatCard   = document.getElementById('chatCard');
const msgsEl     = document.getElementById('msgs');
const typingEl   = document.getElementById('typing');
const chatTextEl = document.getElementById('chatText');
const chatFormEl = document.getElementById('chatForm');
const presenceEl = document.getElementById('presence');
const replyBar   = document.getElementById('replyBar');
const replyName  = document.getElementById('replyName');
const replySnip  = document.getElementById('replySnippet');
const replyCancel= document.getElementById('replyCancel');

function hideChat(reason){
  if(chatCard) chatCard.style.display = 'none';
  if(reason) console.warn('[chat] d√©sactiv√©:', reason);
}
function esc(s){ return String(s||'').replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;' }[c])); }
const hhmm = ts => new Date(ts||Date.now()).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
const dayKey = ts => { const d=new Date(ts||Date.now()); return d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate(); };
let lastDayKey = '';
let REPLY_TARGET = null;

function showReplyBar(target){
  REPLY_TARGET = target;
  replyName.textContent = target?.from || '‚Äî';
  replySnip.textContent = (target?.text || '').slice(0, 160);
  replyBar.classList.remove('hidden');
}
function hideReplyBar(){
  REPLY_TARGET = null;
  replyBar.classList.add('hidden');
  replyName.textContent = '‚Äî';
  replySnip.textContent = '‚Äî';
}
replyCancel?.addEventListener('click', hideReplyBar);

function jumpToMessage(id){
  if(!id) return;
  const el = msgsEl.querySelector(`[data-mid="${CSS.escape(id)}"]`);
  if(!el) return;
  el.scrollIntoView({behavior:'smooth', block:'center'});
  el.classList.add('flash');
  setTimeout(()=> el.classList.remove('flash'), 1800);
}
function addMsg(m){
  if(!msgsEl) return;
  const ts = m.ts || Date.now();
  const k  = dayKey(ts);
  if(k!==lastDayKey){
    msgsEl.insertAdjacentHTML('beforeend', `<div class="w-day">${new Date(ts).toLocaleDateString()}</div>`);
    lastDayKey = k;
  }
  const me  = (m.from === CONNECTED_USER.nom);
  const ini = (m.from||'?').split(' ').map(x=>x[0]).join('').slice(0,2).toUpperCase();
  const wrap = document.createElement('div');
  wrap.className = 'w-msg ' + (me ? 'mine' : 'theirs');
  wrap.dataset.mid = m.id || m._id || String(ts);
  const fromLine = `<div class="w-from">${esc(me ? 'Moi' : (m.from||'‚Äî'))}</div>`;
  const q = (m.replyTo && (m.replyTo.text || m.replyTo.from)) ? `
    <div class="w-quote" data-ref="${esc(m.replyTo.id||'')}" title="Afficher le message cit√©">
      <div class="q-name">${esc(m.replyTo.from || '‚Äî')}</div>
      <div class="q-text">${esc((m.replyTo.text||'').slice(0,160))}</div>
    </div>` : '';
  wrap.innerHTML = `${me ? '' : `<div class="w-avatar-sm">${ini}</div>`}<div class="w-bubble">${fromLine}${q}<div class="w-text">${esc(m.text||'')}</div><div class="w-meta"><span class="w-time">${hhmm(ts)}</span>${me?'<span class="w-ticks">‚úì‚úì</span>':''}</div></div>`;
  msgsEl.appendChild(wrap);
  msgsEl.scrollTop = msgsEl.scrollHeight;
}
/* === Socket.io === */
let socket;
try{
  socket = io({
    path: '/socket.io',
    transports: ['websocket','polling'],
    auth: { user: { nom: CONNECTED_USER.nom, etab: CONNECTED_USER.etab, role: CONNECTED_USER.role, inspection: CONNECTED_USER.inspection } }
  });
  window.socket = socket;
}catch(e){ hideChat(e); }

if(!socket){ hideChat('io indisponible'); }
else{
  socket.on('connect', ()=>{ presenceEl && (presenceEl.textContent = 'Connect√©s : ‚Äî'); socket.emit('chat:join', { inspection: CONNECTED_USER.inspection, etab: CONNECTED_USER.etab }); });
  socket.on('disconnect', (reason)=>{ presenceEl && (presenceEl.textContent = 'Hors ligne'); console.warn('[chat] disconnect:', reason); });
  socket.on('connect_error', (err)=>{ console.warn('[chat] connect_error:', err?.message||err); if(chatTextEl) chatTextEl.disabled = true; });
  socket.on('chat:history', (list)=>{ msgsEl.innerHTML=''; lastDayKey=''; (Array.isArray(list)?list:[]).forEach(addMsg); });
  socket.on('chat:new', addMsg);
  socket.on('chat:error', e => alert(e?.error || e?.message || 'Erreur chat'));
  socket.on('presence:update', n => { presenceEl && (presenceEl.textContent = `Connect√©s : ${n}`); });
  let typingClear;
  socket.on('chat:typing', payload=>{
    if(!typingEl) return;
    const from = payload?.from||'Quelqu‚Äôun';
    const isTyping = !!payload?.typing;
    if(from === CONNECTED_USER.nom) return;
    typingEl.textContent = isTyping ? `${from} est en train d‚Äô√©crire‚Ä¶` : '';
    clearTimeout(typingClear);
    if(isTyping) typingClear = setTimeout(()=> typingEl.textContent='', 1200);
  });
  document.getElementById('chatRefresh')?.addEventListener('click', ()=>{ socket?.emit('chat:join', { inspection: CONNECTED_USER.inspection, etab: CONNECTED_USER.etab }); });
  if(chatTextEl){
    let typingTimer;
    chatTextEl.addEventListener('input', ()=>{
      socket.emit('chat:typing', { typing:true, from: CONNECTED_USER.nom });
      clearTimeout(typingTimer);
      typingTimer = setTimeout(()=> socket.emit('chat:typing', { typing:false, from: CONNECTED_USER.nom }), 800);
    });
  }
}
msgsEl?.addEventListener('click', (e)=>{
  const msg = e.target.closest('.w-msg');
  if(!msg) return;
  const quote = e.target.closest('.w-quote');
  if(quote && quote.dataset.ref){ jumpToMessage(quote.dataset.ref); return; }
  const id   = msg.dataset.mid || '';
  const from = msg.querySelector('.w-from')?.textContent?.replace(/^Moi$/,'Vous') || '‚Äî';
  const text = msg.querySelector('.w-text')?.textContent || '';
  showReplyBar({ id, from, text });
  chatTextEl?.focus();
});
chatTextEl?.addEventListener('keydown', (e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); chatFormEl?.requestSubmit(); }});
chatFormEl?.addEventListener('submit', e=>{
  e.preventDefault();
  const text = (chatTextEl?.value||'').trim();
  if(!text) return;
  const payload = { text, ts: Date.now() };
  if(REPLY_TARGET){ payload.replyTo = { id: REPLY_TARGET.id||'', from: REPLY_TARGET.from||'', text: REPLY_TARGET.text||'' }; }
  socket?.emit('chat:send', payload);
  chatTextEl.value='';
  hideReplyBar();
});
document.getElementById('emojiBtn')?.addEventListener('click', ()=>{ chatTextEl.value += (chatTextEl.value ? ' ' : '') + 'üôÇ'; chatTextEl.focus(); });
document.getElementById('attachBtn')?.addEventListener('click', ()=>{ document.getElementById('chatFile')?.click(); });
if(socket) socket.on('files:changed', ()=> { try{ refreshFiles(); }catch(_){} });

/******************** PARAM√àTRES (modale) ********************/
const modal    = document.getElementById('settingsModal');
const btnOpen  = document.getElementById('btnOpenSettings');
const btnCloseSettings = document.getElementById('btnCloseSettings');
const btnClose2= document.getElementById('btnClose2');
const btnSaveAll = document.getElementById('btnSaveAll');

btnOpen?.addEventListener('click', (e)=>{ e.preventDefault(); openSettings(); });
btnCloseSettings?.addEventListener('click', ()=> closeModal(modal));
btnClose2?.addEventListener('click', ()=> closeModal(modal));
btnSaveAll?.addEventListener('click', saveAllAndClose);

const yearInput = document.getElementById('yearInput');
const effTbody = document.getElementById('effTbody');
const staffTbody= document.getElementById('staffTbody');
document.getElementById('btnAddEff').addEventListener('click', ()=> addEffRow({classe:'',filles:0,garcons:0}));
document.getElementById('btnAddStaff').addEventListener('click', ()=> addStaffRow({nom:'',grade:'',matiere:'',statut:'',obs:''}));
document.getElementById('btnLoadClassesFromPreset').addEventListener('click', loadClassesPreset);
document.getElementById('btnExportStaff').addEventListener('click', exportStaffCSV);
document.getElementById('btnPrintStaff').addEventListener('click', printStaff);

const bCycle = document.getElementById('bCycle');
const bSpec = document.getElementById('bSpec');
const baselineClassList = document.getElementById('classList');
const currentClassChip = document.getElementById('currentClassChip');
const bTbody = document.getElementById('bTbody');
// Retire les anciens boutons "Supprimer discipline" (toutes variantes hors .js-del-disc)
function removeLegacyDeleteButtons(root = document){
  const candidates = root.querySelectorAll(
    '#bTbody button:not(.js-del-disc),' +                // tout bouton autre que le nouveau
    '#bTbody [data-legacy-delete],' +                   // attribut ad hoc
    '#bTbody button[onclick*="deleteDisc"],' +          // onclick legacy
    '#bTbody button[onclick*="supprimerDisc"]'
  );
  candidates.forEach(btn=>{
    const txt   = (btn.textContent||'').toLowerCase();
    const title = (btn.title||'').toLowerCase();
    if (txt.includes('supprimer') || title.includes('supprimer') || txt.includes('üóë')) {
      btn.remove();
    }
  });
  // S'il y a des ic√¥nes/ancres sans <button> :
  root.querySelectorAll('#bTbody td').forEach(td=>{
    if (!td.querySelector('.js-del-disc') && /üóë|supprimer/i.test(td.textContent||'')) {
      // on supprime les √©l√©ments cliquables suspects
      td.querySelectorAll('a,span,i,svg').forEach(el=>{
        if(/üóë|supprimer/i.test(el.textContent||'')) el.remove();
      });
    }
  });
}
removeLegacyDeleteButtons();

// Si une r√©injection recr√©e de vieux boutons (chargement, reset, etc), on nettoie automatiquement
const _obsDel = new MutationObserver(muts=>{
  for(const m of muts){
    if(m.type==='childList') removeLegacyDeleteButtons(m.target);
  }
});
if (bTbody) _obsDel.observe(bTbody, { childList:true, subtree:true });

// === R√©cup√®re de fa√ßon robuste le nom de la discipline sur une ligne <tr>
function getDiscNameFromRow(tr){
  if(!tr) return '';
  // 1) champ explicite
  const field = tr.querySelector('[data-field="discipline"]');
  if(field){
    if('value' in field) return String(field.value||'').trim();          // input/select/textarea
    return String(field.textContent||'').trim();                          // <td contenteditable>, <span>, etc.
  }
  // 2) 1 ≥·µâ cellule : input/textarea/select
  const c0 = tr.cells && tr.cells[0];
  if(c0){
    const ctrl = c0.querySelector('input, textarea, select');
    if(ctrl) return String(ctrl.value||'').trim();
    if(c0.isContentEditable || c0.getAttribute('contenteditable') === 'true'){
      return String(c0.textContent||'').trim();
    }
    const txt = String(c0.textContent||'').trim();
    if(txt) return txt;
  }
  // 3) fallback : n‚Äôimporte quel input de la ligne
  const any = tr.querySelector('input, textarea, select');
  if(any) return String(any.value||'').trim();
  return '';
}


// ===== suppression r√©elle d'une discipline (API ‚Üí fallback si besoin) =====
async function deleteBaselineDisciplineNow(classLabel, discipline){
  const { annee, cycle, specialite } = serializeBaselines();
  const base = splitClassLabel(classLabel||'').base;
  const disc = String(discipline||'').trim();

  if(!annee || !cycle || !specialite || !base || !disc){
    alert("Suppression impossible : ann√©e/cycle/sp√©cialit√©/classe/discipline manquants.");
    return false;
  }

  // 1) Tentative DELETE granulaire (classe + discipline)
  let ok = false;
  try{
    const url = `/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cycle)}&specialite=${encodeURIComponent(specialite)}&classe=${encodeURIComponent(base)}&discipline=${encodeURIComponent(disc)}`;
    const r = await fetch(url, { method:'DELETE', credentials:'same-origin' });
    ok = r.ok; // 200/204 ‚Üí OK
  }catch(_){ /* ignore */ }

  // 2) Fallback (si l'API ne supporte pas DELETE granulaire)
  if(!ok){
    const rows = BSTATE.get(classLabel) || [];
    const next = rows.filter(r => String(r.discipline||'').trim() !== disc);
    BSTATE.set(classLabel, next);
    await saveBaselinesReplace();
  }
  return true;
}

// D√©l√©gation de clic sur le tableau #bTbody (bouton .js-del-disc)
// D√©l√©gation de clic sur le tableau #bTbody (bouton .js-del-disc)
bTbody?.addEventListener('click', async (e)=>{
  const btn = e.target.closest('.js-del-disc');
  if(!btn) return;

  const tr = btn.closest('tr');
  const name = getDiscNameFromRow(tr);   // ‚Üê nouveau

  if(!CURRENT_CLASS){ alert("Classe courante inconnue."); return; }

  // Si pas de nom : on supprime quand m√™me localement (UI + mod√®le), sans aller au serveur
  if(!name){
    const idx = [...bTbody.children].indexOf(tr);
    tr.remove();
    const rows = BSTATE.get(CURRENT_CLASS) || [];
    if(idx > -1){ rows.splice(idx,1); BSTATE.set(CURRENT_CLASS, rows); }
    try{ renderDiscTable?.(); }catch(_){}
    return;
  }

  if(!confirm(`Supprimer d√©finitivement la discipline ¬´ ${name} ¬ª ?`)) return;

  // 1) serveur (ou fallback auto)
  const ok = await deleteBaselineDisciplineNow(CURRENT_CLASS, name);
  if(!ok) return;

  // 2) UI + mod√®le local
  tr.remove();
  const rows = BSTATE.get(CURRENT_CLASS) || [];
  BSTATE.set(CURRENT_CLASS, rows.filter(r => String(r.discipline||'').trim() !== name));

  // 3) rafra√Æchissement doux
  try{ renderDiscTable?.(); }catch(_){}
});


document.getElementById('btnLoadBaselines').addEventListener('click', ()=> loadBaselines(false));
document.getElementById('btnLoadBaselineDefaults').addEventListener('click', ()=> loadBaselines(true));
document.getElementById('btnImportExpected').addEventListener('click', importExpectedToCurrent);
function addDiscRowToCurrent(row){
  if(!CURRENT_CLASS){ alert("S√©lectionnez d'abord une classe."); return; }

  const tr = document.createElement('tr');

  // 1) nom de discipline (√©ditable)
const tdName = document.createElement('td');
tdName.contentEditable = "true";
tdName.setAttribute('data-field','discipline');   // ‚Üê important
tdName.textContent = (row?.discipline || '').trim();
tr.appendChild(tdName);

  // 2) colonnes num√©riques (dans l'ordre de ton thead)
  const fields = [
    'heuresDues',
    'leconsPrevues',
    'leconsDigPrevues',
    'tpPrevus',
    'tpDigPrevus',
    'enseignantsPoste'
  ];
  fields.forEach((key)=>{
    const td = document.createElement('td');
    const inp = document.createElement('input');
    inp.type = 'number';
    inp.min = '0';
    inp.value = +row?.[key] || 0;
    td.appendChild(inp);
    tr.appendChild(td);
  });

  // 3) colonne "actions" (bouton üóë)
  const tdAct = document.createElement('td');
  tdAct.innerHTML =
    `<button type="button" class="btn danger js-del-disc" title="Supprimer cette discipline">üóë</button>`;
  tr.appendChild(tdAct);

  // 4) ins√©rer la ligne dans le tbody
  bTbody.appendChild(tr);

  // 5) mettre √† jour le mod√®le local (BSTATE) si tu ajoutes c√¥t√© UI
  const list = BSTATE.get(CURRENT_CLASS) || [];
  list.push({
    discipline: tdName.textContent.trim(),
    heuresDues: +(tr.children[1].querySelector('input')?.value||0),
    leconsPrevues: +(tr.children[2].querySelector('input')?.value||0),
    leconsDigPrevues: +(tr.children[3].querySelector('input')?.value||0),
    tpPrevus: +(tr.children[4].querySelector('input')?.value||0),
    tpDigPrevus: +(tr.children[5].querySelector('input')?.value||0),
    enseignantsPoste: +(tr.children[6].querySelector('input')?.value||0)
  });
  BSTATE.set(CURRENT_CLASS, list);
}

document.getElementById('btnAddClass').addEventListener('click', ()=> addBaselineClass(prompt('Nom de la classe :')||''));
document.getElementById('btnRenameClass').addEventListener('click', renameBaselineClass);
document.getElementById('btnDeleteClass').addEventListener('click', deleteBaselineClass);
document.getElementById('btnSyncClasses').addEventListener('click', syncClassesFromEffectifs);
document.getElementById('btnOpenStaffExplorer')?.addEventListener('click', ()=> openStaffExplorer());
document.getElementById('btnOpenStaffExplorer2')?.addEventListener('click', ()=> openStaffExplorer());

const BSTATE = new Map();
let CURRENT_CLASS = '';
let CURRENT_ALLOWED_CLASSES = [];

function ensureBaselineForBase(labelOrBase){
  const sl  = splitClassLabel(labelOrBase);
  const key = makeClassLabel(sl.base, sl.division || 1);
  if (!key) return;
  const kBase = sl.base;
  const k1    = makeClassLabel(sl.base, 1);
  if (sl.division === 1 && BSTATE.has(kBase) && !BSTATE.has(k1)) {
    BSTATE.set(k1, (BSTATE.get(kBase) || []).map(x => ({...x})));
    BSTATE.delete(kBase);
  }
  if (!BSTATE.has(key)) {
    const proto = BSTATE.get(k1) || BSTATE.get(kBase) || [];
    BSTATE.set(key, proto.map(x => ({...x})));
    if (!CURRENT_CLASS) CURRENT_CLASS = key;
    renderClassList();
    renderDiscTable();
  }
}
function autoSyncBaselinesFromEffectifs(){
  if(!effTbody) return;
  const labels = [...effTbody.querySelectorAll('tr')].map(labelFromEffRow).filter(Boolean);
  const unique = [...new Set(labels)];
  const bases  = new Set(unique.map(l => splitClassLabel(l).base));
  let changed = false;
  for (const base of bases) {
    const k1 = makeClassLabel(base, 1);
    if (BSTATE.has(base)) {
      if (!BSTATE.has(k1)) BSTATE.set(k1, (BSTATE.get(base) || []).map(x => ({...x})));
      BSTATE.delete(base);
      changed = true;
    }
  }
  unique.forEach(l => {
    if (!BSTATE.has(l)) {
      const { base } = splitClassLabel(l);
      const proto = BSTATE.get(makeClassLabel(base, 1)) || [];
      BSTATE.set(l, proto.map(x => ({...x})));
      changed = true;
    }
  });
  for (const k of [...BSTATE.keys()]) {
    if (!unique.includes(k)) { BSTATE.delete(k); changed = true; }
  }
  if (!CURRENT_CLASS && unique.length) { CURRENT_CLASS = unique[0]; changed = true; }
  if (changed) { renderClassList(); renderDiscTable(); }
}

function mapBaselineRow(r){
  return { discipline: r.discipline || '', heuresDues: +r.heuresDues || 0, leconsPrevues: +r.leconsPrevues || 0, leconsDigPrevues: +r.leconsDigPrevues || 0, tpPrevus: +r.tpPrevus || 0, tpDigPrevus: +r.tpDigPrevus || 0, enseignantsPoste: +r.enseignantsPoste || 0 };
}
async function loadRowsFromSources(base){
  const cyc  = bCycle.value || selCycle.value;
  const spec = bSpec.value  || selSpec.value;
  const annee = (yearInput?.value || '').trim() || getSchoolYear();
  if(!cyc || !spec) return [];
  try{
    const r = await getJSON(`/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const list = (r||[]).filter(x => String(x.classe||'').trim() === base);
    if(list.length) return list.map(mapBaselineRow);
  }catch(_){}
  try{
    const r = await getJSON(`/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const list = (r||[]).filter(x => String(x.classe||'').trim() === base);
    if(list.length) return list.map(mapBaselineRow);
  }catch(_){}
  try{
    const ref = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    const expected = [...new Set(ref.map(r => String(r.nom||'').trim()).filter(Boolean))];
    if(expected.length) return expected.map(n => ({ discipline:n, heuresDues:0, leconsPrevues:0, leconsDigPrevues:0, tpPrevus:0, tpDigPrevus:0, enseignantsPoste:0 }));
  }catch(_){}
  return [];
}
async function ensureRowsFor(classLabel){
  const cur = BSTATE.get(classLabel) || [];
  if(cur.length) return;
  const { base, division } = splitClassLabel(classLabel);
  if(division > 1){
    const proto = BSTATE.get(makeClassLabel(base,1));
    if(proto && proto.length){ BSTATE.set(classLabel, proto.map(x=>({...x}))); return; }
  }
  const rows = await loadRowsFromSources(base);
  BSTATE.set(classLabel, rows);
}
function renderClassList(){
  baselineClassList.innerHTML = '';
  const classes = [...BSTATE.keys()].sort((a,b)=> a.localeCompare(b));
  classes.forEach(name=>{
    const div = document.createElement('div');
    div.className = 'classItem' + (name===CURRENT_CLASS ? ' active' : '');
    div.textContent = name || '‚Äî';
    div.addEventListener('click', async ()=>{
      CURRENT_CLASS = name;
      renderClassList();
      await ensureRowsFor(CURRENT_CLASS);
      renderDiscTable();
    });
    baselineClassList.appendChild(div);
  });
  if(!CURRENT_CLASS && classes.length){ CURRENT_CLASS = classes[0]; }
  currentClassChip.textContent = CURRENT_CLASS || '‚Äî';
}
function renderDiscTable(){
  const rows = BSTATE.get(CURRENT_CLASS)||[];
  bTbody.innerHTML='';
  if(!CURRENT_CLASS){ bTbody.innerHTML='<tr><td colspan="8" class="subtle">Aucune classe s√©lectionn√©e.</td></tr>'; return; }
  rows.forEach((r,idx)=> bTbody.insertAdjacentHTML('beforeend', discRowHTML(r, idx)));
  attachRowEvents();
  ensureButtonsForAllRows?.();
}
function discRowHTML(r,idx){
  return `<tr data-idx="${idx}"><td><input type="text" value="${r.discipline||''}"></td><td><input type="number" min="0" value="${+r.heuresDues||0}"></td><td><input type="number" min="0" value="${+r.leconsPrevues||0}"></td><td><input type="number" min="0" value="${+r.leconsDigPrevues||0}"></td><td><input type="number" min="0" value="${+r.tpPrevus||0}"></td><td><input type="number" min="0" value="${+r.tpDigPrevus||0}"></td><td><input type="number" min="0" value="${+r.enseignantsPoste||0}"></td><td><button class="btn">üóë</button></td></tr>`;
}
function attachRowEvents(){
  bTbody.querySelectorAll('tr').forEach(tr=>{
    tr.querySelector('button').addEventListener('click', ()=>{ const idx=+tr.dataset.idx; const arr=BSTATE.get(CURRENT_CLASS)||[]; arr.splice(idx,1); BSTATE.set(CURRENT_CLASS,arr); renderDiscTable(); });
    tr.querySelectorAll('input').forEach((inp,pi)=>{
      inp.addEventListener('input', ()=>{ const idx=+tr.dataset.idx; const arr=BSTATE.get(CURRENT_CLASS)||[]; const item={...arr[idx]}; if(pi===0) item.discipline=inp.value.trim(); if(pi===1) item.heuresDues=+inp.value||0; if(pi===2) item.leconsPrevues=+inp.value||0; if(pi===3) item.leconsDigPrevues=+inp.value||0; if(pi===4) item.tpPrevus=+inp.value||0; if(pi===5) item.tpDigPrevus=+inp.value||0; if(pi===6) item.enseignantsPoste=+inp.value||0; arr[idx]=item; BSTATE.set(CURRENT_CLASS,arr); });
    });
  });
}
function addDiscRowToCurrent(r){ if(!CURRENT_CLASS){ alert('Ajoutez / s√©lectionnez d‚Äôabord une classe.'); return; } const arr=BSTATE.get(CURRENT_CLASS)||[]; arr.push({...r}); BSTATE.set(CURRENT_CLASS,arr); renderDiscTable(); }
// Bouton "+ Discipline" (baselines)
document.getElementById('btnAddDisc')
  ?.addEventListener('click', ()=> addDiscRowToCurrent({
    discipline:'', heuresDues:0, leconsPrevues:0, leconsDigPrevues:0,
    tpPrevus:0, tpDigPrevus:0, enseignantsPoste:0
  }));

function ensureActionCell(tr){
  if(!tr) return;
  const last = tr.lastElementChild;
  const hasBtn = last && last.querySelector?.('.js-del-disc');
  if(!hasBtn){
    const tdAct = document.createElement('td');
    tdAct.innerHTML = `<button type="button" class="btn danger js-del-disc" title="Supprimer cette discipline">üóë</button>`;
    tr.appendChild(tdAct);
  }
}

function ensureButtonsForAllRows(){
  bTbody?.querySelectorAll('tr')?.forEach(ensureActionCell);
}


function addBaselineClass(name){ name=String(name||'').trim(); if(!name) return; if(BSTATE.has(name)) return alert('Classe d√©j√† pr√©sente.'); BSTATE.set(name,[]); CURRENT_CLASS=name; renderClassList(); renderDiscTable(); }
function renameBaselineClass(){ if(!CURRENT_CLASS) return; const n=prompt('Nouveau nom :', CURRENT_CLASS); if(!n) return; const rows=BSTATE.get(CURRENT_CLASS); BSTATE.delete(CURRENT_CLASS); BSTATE.set(n, rows); CURRENT_CLASS=n; renderClassList(); renderDiscTable(); }
function deleteBaselineClass(){ if(!CURRENT_CLASS) return; if(!confirm(`Supprimer ${CURRENT_CLASS} ?`)) return; BSTATE.delete(CURRENT_CLASS); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); }
async function importExpectedToCurrent(){
  if(!CURRENT_CLASS) return alert('S√©lectionnez une classe.');
  const cyc=bCycle.value||selCycle.value, spec=bSpec.value||selSpec.value;
  if(!cyc||!spec) return alert('Choisissez cycle et sp√©cialit√©.');
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    const expected = [...new Set(rows.map(r=>r.nom))];
    const cur = new Set((BSTATE.get(CURRENT_CLASS)||[]).map(r=> (r.discipline||'').trim().toLowerCase()));
    expected.filter(n=>!cur.has(n.trim().toLowerCase())).forEach(n=> addDiscRowToCurrent({discipline:n,heuresDues:0,leconsPrevues:0,leconsDigPrevues:0,tpPrevus:0,tpDigPrevus:0,enseignantsPoste:0}));
  }catch(_){ alert('Impossible de charger le r√©f√©rentiel.'); }
  ensureButtonsForAllRows?.();
}
function syncClassesFromEffectifs(){
  const classes = [...effTbody.querySelectorAll('tr')].map(labelFromEffRow).filter(Boolean);
  if(!classes.length) return alert('Aucune classe dans les effectifs.');
  for(const k of [...BSTATE.keys()]) if(!classes.includes(k)) BSTATE.delete(k);
  classes.forEach(c => { if(!BSTATE.has(c)) BSTATE.set(c, []); });
  if(!CURRENT_CLASS) CURRENT_CLASS = classes[0];
  renderClassList(); renderDiscTable();
}
async function fillSpecsForCycle(cycle){
  bSpec.innerHTML = '<option value="">‚Äî</option>';
  if(!cycle) return;
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cycle)}&actif=true`);
    const specs = [...new Set((rows||[]).map(r=>r.specialite))].sort();
    specs.forEach(s=> bSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
  }catch(_){/* ignore */}
}
async function loadBaselines(forceDefaults){
  const annee=(yearInput.value||'').trim()||getSchoolYear();
  const cyc = bCycle.value || selCycle.value;
  const spec = bSpec.value || selSpec.value;
  if(!cyc || !spec){ alert('Choisir un cycle et une sp√©cialit√©.'); return; }
  try{
    const url = forceDefaults ? `/api/settings/baselines/defaults?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}` : `/api/settings/baselines?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`;
    const rows = await getJSON(url);
    BSTATE.clear();
    (rows||[]).forEach(r=>{
      const c=String(r.classe||'').trim(); if(!c) return;
      const list = BSTATE.get(c)||[];
      list.push({ discipline: r.discipline||'', heuresDues:+r.heuresDues||0, leconsPrevues:+r.leconsPrevues||0, leconsDigPrevues:+r.leconsDigPrevues||0, tpPrevus:+r.tpPrevus||0, tpDigPrevus:+r.tpDigPrevus||0, enseignantsPoste:+r.enseignantsPoste||0 });
      BSTATE.set(c, list);
    });
    if(!BSTATE.size && forceDefaults===false){ await loadBaselines(true); return; }
    CURRENT_CLASS = [...BSTATE.keys()][0] || '';
    renderClassList(); renderDiscTable();
  }catch(e){ alert('Impossible de charger les baselines.'); }
}
async function autoLoadBaselines(){ if((bCycle.value||'') && (bSpec.value||'')) await loadBaselines(false); }
function collectBaselinesList(){
  const out=[]; for (const [classe, list] of BSTATE.entries()){ (list||[]).forEach(r=>{ if(!classe || !String(r.discipline||'').trim()) return; out.push({ classe, discipline: r.discipline, heuresDues:+r.heuresDues||0, leconsPrevues:+r.leconsPrevues||0, leconsDigPrevues:+r.leconsDigPrevues||0, tpPrevus:+r.tpPrevus||0, tpDigPrevus:+r.tpDigPrevus||0, enseignantsPoste:+r.enseignantsPoste||0 }); }); } return out;
}
function normalizeBase(s){ return splitClassLabel(String(s||'').trim()).base; }
function rowsForBase(base){ base = normalizeBase(base); return [...effTbody.querySelectorAll('tr')].filter(tr => normalizeBase(tr.querySelector('td input')?.value||'') === base); }
function labelFromEffRow(tr){
  const base = normalizeBase(tr.querySelector('td input')?.value || '');
  const div  = Math.max(1, +tr.querySelector('.inp-div')?.value || 1);
  return makeClassLabel(base, div);
}
function nextDivisionIndexForBase(base){
  const rows = rowsForBase(base);
  const max = rows.reduce((m,tr)=> Math.max(m, +tr.querySelector('.inp-div')?.value||0), 0);
  return (max||0) + 1;
}
function renumberBaseGroup(base){ rowsForBase(base).forEach((tr,i)=>{ const divInp = tr.querySelector('.inp-div'); if(divInp) divInp.value = i+1; }); }
function setDivisionCountForBase(base, nWanted){
  base = normalizeBase(base);
  nWanted = Math.max(1, +nWanted||1);
  let rows = rowsForBase(base);
  if(rows.length < nWanted){
    for(let i=rows.length; i<nWanted; i++){
      const last = rows[rows.length-1] || null;
      const newTr = addEffRow({ classe: base, divisionIndex: i+1, filles:0, garcons:0 });
      if(last) effTbody.insertBefore(newTr, last.nextSibling);
      rows = rowsForBase(base);
    }
  }else if(rows.length > nWanted){
    rows.slice(nWanted).forEach(tr => tr.remove());
  }
  renumberBaseGroup(base);
  autoSyncBaselinesFromEffectifs();
  ensureBaselineForBase(makeClassLabel(base, 1));
}
function addEffRow(e){
  const base = normalizeBase(e.classe||'');
  const div  = Math.max(1, Number(e.divisionIndex||splitClassLabel(e.classe||'').division||1));
  const filles = +e.filles||0, garcons = +e.garcons||0;
  const tr = document.createElement('tr');
  tr.innerHTML = `<td><input type="text" placeholder="ex : 1√®re ann√©e DECO" value="${base}"></td><td><input type="number" class="inp-div" min="1" value="${div}" style="width:70px"></td><td><input type="number" min="0" value="${filles}"></td><td><input type="number" min="0" value="${garcons}"></td><td style="display:flex;gap:6px;justify-content:center"><button class="btn" type="button" title="Ajouter une division">‚ûï</button><button class="btn" type="button" title="Supprimer">üóë</button></td>`;
  const [inpBase, inpDiv] = tr.querySelectorAll('td input');
  const [btnAdd, btnDel]  = tr.querySelectorAll('button');
  let lastBase = base;
  btnAdd.addEventListener('click', ()=>{ const b = normalizeBase(inpBase.value); const n = nextDivisionIndexForBase(b); addEffRow({ classe: b, divisionIndex: n, filles:0, garcons:0 }); renumberBaseGroup(b); autoSyncBaselinesFromEffectifs(); });
  btnDel.addEventListener('click', ()=>{ const b = normalizeBase(inpBase.value); tr.remove(); renumberBaseGroup(b); autoSyncBaselinesFromEffectifs(); });
  inpBase.addEventListener('input', ()=>{
    const newBase = normalizeBase(inpBase.value);
    inpBase.value = newBase;
    if(newBase !== lastBase){
      renumberBaseGroup(lastBase); renumberBaseGroup(newBase);
      lastBase = newBase;
      if((+inpDiv.value||0) < 1) inpDiv.value = nextDivisionIndexForBase(newBase);
    }
     autoSyncBaselinesFromEffectifs();
  });
  inpBase.addEventListener('blur', ()=> ensureBaselineForBase(inpBase.value));
  inpDiv.addEventListener('input', ()=>{ let v = Math.max(1, +inpDiv.value || 1); setDivisionCountForBase(normalizeBase(inpBase.value), v); });
  effTbody.appendChild(tr);
  ensureBaselineForBase(makeClassLabel(base, div));
  return tr;
}
function addStaffRow(s){
  const tr=document.createElement('tr');
  tr.innerHTML = `<td><input type="text" placeholder="Nom & pr√©nom" value="${s.nom||''}"></td><td><input type="text" placeholder="ex : A3" value="${s.grade||''}"></td><td><input type="text" placeholder="ex : Histoire de l'art" value="${s.matiere||''}"></td><td><input type="text" placeholder="ex : Titulaire" value="${s.statut||''}"></td><td><textarea placeholder="Observation‚Ä¶">${s.obs||''}</textarea></td><td style="display:flex;gap:6px;justify-content:center"><button class="btn" type="button" title="Fiche enseignant">üìÑ</button><button class="btn" type="button" title="Supprimer">üóë</button></td>`;
  const [btnFiche, btnDel] = tr.querySelectorAll('button');
  btnDel.addEventListener('click', ()=> tr.remove());
 btnFiche.addEventListener('click', () => {
  const t = tr.querySelectorAll('td input, td textarea');
  const nom = t[0].value.trim();
  // Trouver l'enseignant complet dans SETTINGS_CACHE
  const fullPerson = (SETTINGS_CACHE?.staff || []).find(p => (p.nom || '').trim().toLowerCase() === nom.toLowerCase());
  // Si on trouve l'enseignant complet, on l'utilise, sinon on utilise les donn√©es de base
  const personToSend = fullPerson || {
    nom: t[0].value.trim(),
    grade: t[1].value.trim(),
    matiere: t[2].value.trim(),
    statut: t[3].value.trim(),
    obs: t[4].value.trim(),
    classes: [],
    disciplines: []
  };
  openStaffSheet(personToSend, updated => {
    t[0].value = updated.nom || '';
    t[1].value = updated.grade || '';
    t[2].value = updated.matiere || '';
    t[3].value = updated.statut || '';
    t[4].value = updated.obs || '';
    if (SETTINGS_CACHE) {
      const staff = SETTINGS_CACHE.staff || [];
      const idx = staff.findIndex(p => (p.nom || '').trim().toLowerCase() === (updated.nom || '').trim().toLowerCase());
      if (idx >= 0) staff[idx] = { ...staff[idx], ...updated };
    }
  });
});

  staffTbody.appendChild(tr);
}
async function getDefaultClassesFor(cyc,spec){
  try{ const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`); return r?.classes||[]; }catch(_){ return []; }
}
async function refreshEffectifsForSelection(){
  const cyc = bCycle.value || selCycle.value;
  const spec = bSpec.value || selSpec.value;

  // On vide la table avant toute chose
  effTbody.innerHTML = '';

  if (!cyc || !spec) {
    // Si le couple cycle/sp√©cialit√© n'est pas complet, on n'affiche rien.
    autoSyncBaselinesFromEffectifs(); // On s'assure que la partie droite est aussi vide
    return;
  }

  // 1. On r√©cup√®re la liste des classes de base ATTENDUES pour ce couple.
  // Cette liste sert de r√©f√©rence pour savoir quelles classes sont pertinentes.
  const expectedBases = await getDefaultClassesFor(cyc, spec);
  
  // Cette variable est importante pour la logique de sauvegarde plus tard.
  CURRENT_ALLOWED_CLASSES = [...expectedBases];

  // 2. On r√©cup√®re TOUS les effectifs d√©j√† enregistr√©s dans le cache.
  const allSavedEffectifs = SETTINGS_CACHE?.effectifs || [];

  // 3. On filtre les effectifs enregistr√©s pour ne garder que ceux dont la "base"
  // correspond aux classes attendues pour le cycle/sp√©cialit√© s√©lectionn√©.
  const relevantEffectifs = allSavedEffectifs.filter(e => {
    const base = splitClassLabel(e.classe || '').base;
    return expectedBases.includes(base);
  });

  // 4. On d√©cide quoi afficher dans la table des effectifs.
  if (relevantEffectifs.length > 0) {
    // CAS A : Il existe d√©j√† des donn√©es sauvegard√©es pour ce couple.
    // On affiche EXACTEMENT ces donn√©es pour permettre leur modification.
    relevantEffectifs.forEach(eff => {
      const { base, division } = splitClassLabel(eff.classe);
      addEffRow({ 
        classe: base, 
        divisionIndex: division, 
        filles: eff.filles, 
        garcons: eff.garcons 
      });
    });
    
    // On s'assure que la num√©rotation des divisions est coh√©rente
    expectedBases.forEach(base => renumberBaseGroup(base));

  } else {
    // CAS B : Aucune donn√©e n'a encore √©t√© enregistr√©e pour ce couple.
    // On affiche la liste des classes par d√©faut, avec des effectifs √† 0,
    // pour que l'utilisateur puisse commencer la saisie.
    expectedBases.forEach(base => {
      addEffRow({ classe: base, divisionIndex: 1, filles: 0, garcons: 0 });
    });
  }

  // 5. Pour finir, on synchronise la liste des "Classes (baselines)" √† droite
  // avec ce qui est maintenant affich√© dans la table des effectifs.
  autoSyncBaselinesFromEffectifs();
}
async function loadClassesPreset(){
  const cyc = bCycle.value || selCycle.value;
  const spec = bSpec.value || selSpec.value;
  if(!cyc || !spec){ alert('Choisir un cycle et une sp√©cialit√©.'); return; }
  try{
    const r = await getJSON(`/api/presets?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}`);
    const classes = r?.classes||[];
    if(!classes.length) return alert('Aucun preset trouv√© pour ce couple.');
    CURRENT_ALLOWED_CLASSES = classes.slice();
    effTbody.innerHTML = '';
    classes.forEach(c=> addEffRow({classe:c, divisionIndex:1, filles:0, garcons:0}));
  }catch(_){ alert('Impossible de charger les classes par d√©faut.'); }
  autoSyncBaselinesFromEffectifs();
}

function collectEffectifs(){
  const rows = [];
  if(!effTbody) return rows;
  [...effTbody.querySelectorAll('tr')].forEach(tr=>{
    const classe  = (tr.querySelector('[data-field="classe"]')?.value || '').trim();
    const filles  = +(tr.querySelector('[data-field="filles"]')?.value || 0);
    const garcons = +(tr.querySelector('[data-field="garcons"]')?.value || 0);
    if(classe) rows.push({ classe, filles, garcons });
  });
  return rows;
}

function collectStaff(){
  const rows = [];
  if(!staffTbody) return rows;
  [...staffTbody.querySelectorAll('tr')].forEach(tr=>{
    const nom     = (tr.querySelector('[data-field="nom"]')?.value || '').trim();
    const grade   = (tr.querySelector('[data-field="grade"]')?.value || '').trim();
    const matiere = (tr.querySelector('[data-field="matiere"]')?.value || '').trim();
    const statut  = (tr.querySelector('[data-field="statut"]')?.value || '').trim();
    const obs     = (tr.querySelector('[data-field="obs"]')?.value || '').trim();
    if(nom || grade || matiere || statut || obs){
      rows.push({ nom, grade, matiere, statut, obs });
    }
  });
  return rows;
}

async function saveAllAndClose(){
  const annee = (yearInput.value||'').trim() || getSchoolYear();
  const displayed = [...effTbody.querySelectorAll('tr')].map(tr=>{
    const t = tr.querySelectorAll('td input');
    const base = normalizeBase(t[0].value.trim());
    const div  = Math.max(1, +t[1].value||1);
    const filles = +t[2].value||0;
    const garcons= +t[3].value||0;
    return { classe: makeClassLabel(base, div), filles, garcons };
  }).filter(x=> x.classe);
  const others = (SETTINGS_CACHE?.effectifs||[]).filter(e=>{ const b = normalizeBase(e.classe||''); return !CURRENT_ALLOWED_CLASSES.map(normalizeBase).includes(b); });
  const effectifs=[...others, ...displayed];
  const UIstaff = [...staffTbody.querySelectorAll('tr')].map(tr => {
  const t = tr.querySelectorAll('td input, td textarea');
  const nom = t[0].value.trim();
  // R√©cup√©rer les donn√©es de la fiche compl√®te si disponible
  const enrich = (SETTINGS_CACHE?.staff || []).find(p => (p.nom || '').trim().toLowerCase() === nom.toLowerCase());
  const base = {
    nom,
    grade: t[1].value.trim(),
    matiere: t[2].value.trim(),
    statut: t[3].value.trim(),
    obs: t[4].value.trim(),
    classes: enrich?.classes || [],
    disciplines: enrich?.disciplines || []
  };
  if (enrich) {
    return {
      ...base,
      prenom: enrich.prenom || '',
      matricule: enrich.matricule || '',
      categorie: enrich.categorie || '',
      sexe: enrich.sexe || '',
      dateNaissance: enrich.dateNaissance || '',
      telephone: enrich.telephone || '',
      regionOrigine: enrich.regionOrigine || '',
      departementOrigine: enrich.departementOrigine || '',
      arrondissementOrigine: enrich.arrondissementOrigine || '',
      posteOccupe: enrich.posteOccupe || '',
      rangPoste: enrich.rangPoste || '',
      dateEntreeFP: enrich.dateEntreeFP || '',
      dateAffectation: enrich.dateAffectation || ''
    };
  }
  return base;
}).filter(x => x.nom);

  const cyc = bCycle.value || selCycle.value; const spec = bSpec.value || selSpec.value; const list = collectBaselinesList();
  try{
    await postJSON('/api/settings', { annee, effectifs, staff: UIstaff });
    if (cyc && spec) await postJSON('/api/settings/baselines', { annee, cycle: cyc, specialite: spec, list });
    SETTINGS_CACHE = { ...(SETTINGS_CACHE||{}), annee, effectifs, staff: UIstaff };
    await refreshSettingsSidebar();
    applyEffectifCapsAndPrefill();
    alert('Param√®tres enregistr√©s.');
    closeModal(modal);
  }catch(e){ alert('Erreur: '+e.message); }
}
async function openSettings(){
  openModal(modal);
  yearInput.value = getSchoolYear();
  effTbody.innerHTML=''; staffTbody.innerHTML='';
  BSTATE.clear(); CURRENT_CLASS=''; CURRENT_ALLOWED_CLASSES=[]; renderClassList(); renderDiscTable();
  bCycle.value = selCycle.value || '';
  await fillSpecsForCycle(bCycle.value);
  if (selSpec.value) bSpec.value = selSpec.value;
  try{
    const s = await getJSON(`/api/settings?annee=${encodeURIComponent(yearInput.value)}`);
    SETTINGS_CACHE = s || null;
    (SETTINGS_CACHE?.staff||[]).forEach(addStaffRow);
  }catch(_){ SETTINGS_CACHE=null; }
  await autoLoadBaselines();
  await refreshEffectifsForSelection();
}
/**
 * Construit une carte ma√Ætresse qui associe chaque classe de base √† son cycle et sa sp√©cialit√©.
 * C'est la nouvelle source de v√©rit√© pour le classement des classes.
 */
async function buildMasterClassMap() {
    const classMap = new Map();
    const inspections = [CONNECTED_USER.inspection]; // Pourrait √™tre √©tendu si n√©cessaire
    const cycles = ['premier', 'second'];

    for (const cycle of cycles) {
        try {
            // On r√©cup√®re toutes les disciplines pour un cycle donn√©
            const disciplines = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(inspections[0])}&cycle=${encodeURIComponent(cycle)}&actif=true`);
            const specialites = [...new Set(disciplines.map(d => d.specialite))];

            for (const spec of specialites) {
                // Pour chaque sp√©cialit√©, on charge les classes par d√©faut (presets)
                const presets = await getDefaultClassesFor(cycle, spec);
                presets.forEach(base => {
                    if (!classMap.has(base)) {
                        classMap.set(base, { cycle, specialite: spec });
                    }
                });
            }
        } catch (error) {
            console.error(`Impossible de charger les presets pour le cycle ${cycle}:`, error);
        }
    }
    return classMap;
}

/**
 * Renvoie un poids num√©rique pour une classe afin de permettre un tri logique.
 * Ex: 2nde (2) < 1√®re (3) < Tle (4)
 */
/**
 * Renvoie un poids num√©rique pour une classe afin de permettre un tri logique.
 * NOUVELLE VERSION : G√®re l'ordre 1√®re -> 2nde -> 3√®me -> 4√®me -> Tle
 */
function getClassOrder(className) {
    const name = String(className || '').toLowerCase();
    
    // On assigne des poids dans l'ordre de progression scolaire
    if (name.includes('1√®re') || name.includes('1er')) return 1;
    if (name.includes('2nde') || name.includes('2√®me')) return 2;
    if (name.includes('3√®me')) return 3;
    if (name.includes('4√®me')) return 4;
    if (name.includes('tle') || name.includes('terminale')) return 5; // La Terminale vient apr√®s les ann√©es num√©rot√©es
    
    return 10; // Valeur par d√©faut pour les autres classes
}

async function refreshSettingsSidebar(){
  const y = getSchoolYear();
  yearStat.textContent = y;

  try {
    const r = await fetch(`/api/settings?annee=${encodeURIComponent(y)}`, {credentials:'same-origin'});
    if(!r.ok) throw new Error('no settings');
    SETTINGS_CACHE = await r.json();
  } catch(_) {
    SETTINGS_CACHE = null;
  }

  const eff = SETTINGS_CACHE?.effectifs || [];
  const staff = SETTINGS_CACHE?.staff || [];

  const totEleves = eff.reduce((s,e)=> s + (+e.filles||0) + (+e.garcons||0), 0);
  const nbDivisions = eff.length; // On compte les divisions, pas les classes de base
  const nbEns = staff.length;
  effStaffStat.innerHTML = `${nbDivisions} classe(s)/division(s), ${totEleves} √©l√®ve(s), ${nbEns} enseignant(s).`;

  // --- LOGIQUE FINALE DE GROUPEMENT ET DE TRI ---

  // 1. On construit la carte ma√Ætresse pour l'association cycle/sp√©cialit√©
  const masterClassMap = await buildMasterClassMap();

  // 2. On pr√©pare la structure pour grouper les divisions
  const groupedData = {};

  eff.forEach(e => {
    // On ignore les lignes sans nom de classe
    if (!e.classe) return; 

    const base = splitClassLabel(e.classe).base;
    const classInfo = masterClassMap.get(base);
    
    // On cr√©e un titre de groupe sp√©cifique, ex: "Premier Cycle - DECO"
    const groupTitle = classInfo 
      ? `${classInfo.cycle.charAt(0).toUpperCase() + classInfo.cycle.slice(1)} Cycle - ${classInfo.specialite}`
      : 'Cycle non d√©fini';

    if (!groupedData[groupTitle]) {
      // La structure est maintenant un simple tableau pour stocker chaque division
      groupedData[groupTitle] = []; 
    }

    const filles = +e.filles || 0;
    const garcons = +e.garcons || 0;

    // 3. LA CORRECTION CL√â : ON AJOUTE CHAQUE DIVISION COMME UN OBJET UNIQUE
    // On ne fusionne plus, on ajoute chaque ligne de la table des effectifs.
    groupedData[groupTitle].push({
        label: e.classe, // On garde le nom complet, ex: "2nde AF1 (2)"
        filles: filles,
        garcons: garcons,
        total: filles + garcons
    });
  });

  // 4. On construit le HTML final, en triant correctement
  let tableHTML = '';
  const sortedGroupTitles = Object.keys(groupedData).sort();

  for (const title of sortedGroupTitles) {
    const classesInGroup = groupedData[title];
    if (classesInGroup.length === 0) continue;
    
    tableHTML += `<tbody><tr><td colspan="4" style="background:#f0f4ff;font-weight:700;">${title}</td></tr></tbody>`;
    
    // On trie les divisions DANS le groupe en utilisant notre fonction de tri corrig√©e
    const classRows = classesInGroup
        .sort((a, b) => getClassOrder(a.label) - getClassOrder(b.label))
        .map(divisionData => `
            <tr>
                <td style="text-align:left">${divisionData.label}</td>
                <td style="text-align:right">${divisionData.filles}</td>
                <td style="text-align:right">${divisionData.garcons}</td>
                <td style="text-align:right"><strong>${divisionData.total}</strong></td>
            </tr>
        `).join('');
    
    tableHTML += `<tbody>${classRows}</tbody>`;
  }

  // On injecte le HTML final dans le conteneur
  effTableWrap.innerHTML = `
    <table class="tbl-mini" style="table-layout:auto;">
      <thead>
        <tr>
          <th style="text-align:left">Classe</th>
          <th style="text-align:right">Filles</th>
          <th style="text-align:right">Gar√ßons</th>
          <th style="text-align:right">Total</th>
        </tr>
      </thead>
      ${tableHTML || '<tbody><tr><td colspan="4" class="subtle">‚Äî</td></tr></tbody>'}
    </table>`;
    
  effStaffDetails.classList.remove('hidden');
}

/******************** CHARGEMENT DYNAMIQUE (collecte) & listeners ********************/
selCycle.addEventListener('change', async ()=>{
  formulaires.innerHTML='';
  cycleTotalBloc.classList.add('hidden');
  contEval.classList.add('hidden');
  selSpec.innerHTML='<option value="">-- Choisir --</option>';
  const cyc = selCycle.value;
  if(!cyc){ contSpec.classList.add('hidden'); updateSummary(); return; }
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&actif=true`);
    const specs = [...new Set((rows||[]).map(r=>r.specialite))].sort();
    specs.forEach(s=> selSpec.insertAdjacentHTML('beforeend', `<option value="${s}">${s}</option>`));
    contSpec.classList.toggle('hidden', specs.length===0);
  }catch(_){ contSpec.classList.add('hidden'); }
  updateSummary();
});

selSpec.addEventListener('change', async ()=>{
  formulaires.innerHTML='';
  const spec=selSpec.value, cyc=selCycle.value;
  if(!spec){ contEval.classList.add('hidden'); cycleTotalBloc.classList.add('hidden'); updateSummary(); return; }
  contEval.classList.remove('hidden');
  await buildCollecteFor(cyc, spec);
  await refreshEffectifsForSelection();
  updateSummary();
});

document.getElementById('evaluation').addEventListener('change', updateSummary);
document.addEventListener('click', (e)=>{
  const addBtn = e.target.closest('.js-add-division');
  if(addBtn){ const block = addBtn.closest('.classeBloc'); if(block) addDivisionFromBlock(block); }
  const delBtn = e.target.closest('.js-remove-division');
  if(delBtn){ const block = delBtn.closest('.classeBloc'); if(block) removeDivisionFromBlock(block); }
});
document.addEventListener('input', e => {
  // On ne s'int√©resse qu'aux changements dans les champs num√©riques des formulaires de classe
  if (!(e.target.matches('input[type=number]') && e.target.closest('.classeBloc'))) return;
  
  const row = e.target.closest('tr');
  if (!row) return;

  const bloc = e.target.closest('.classeBloc');
  const cls = bloc.querySelector('h2')?.textContent?.trim() || '';
  const eff = getDivisionEffectifByLabel(cls); // Effectif de la division, pour le plafond

  // --- VALIDATION N¬∞1 : FAIT <= D√õ ---
  // On d√©finit les paires de colonnes √† valider
  const validationPairs = [
      ['.val1', '.val2'],   // Heures dues / faites
      ['.val4', '.val5'],   // Le√ßons pr√©vues / faites
      ['.val7', '.val8'],   // Le√ßons digitalis√©es pr√©vues / faites
      ['.val10', '.val11'], // TP pr√©vus / faits
      ['.val13', '.val14'], // TP digitalis√©s pr√©vus / faits
      ['.val19', '.val20']  // Effectif enseignants / En poste
  ];

  validationPairs.forEach(([dueSelector, faitSelector]) => {
      const dueEl = row.querySelector(dueSelector);
      const faitEl = row.querySelector(faitSelector);
      if (dueEl && faitEl) {
          const dueValue = +dueEl.value || 0;
          if (+faitEl.value > dueValue) {
              faitEl.value = dueValue; // On corrige automatiquement
          }
      }
  });

  // --- VALIDATION N¬∞2 : GESTION DE LA R√âUSSITE DES √âL√àVES ---
  const compEl = row.querySelector('.val16'); // √âl√®ves ayant compos√©
  const m10El = row.querySelector('.val17');  // √âl√®ves avec moyenne >= 10

  // On s'assure que le nombre d'√©l√®ves ayant compos√© ne d√©passe pas l'effectif total
  if (eff > 0 && compEl && (+compEl.value > eff)) {
      compEl.value = eff;
  }
  
  // On s'assure que le nombre d'√©l√®ves ayant la moyenne ne d√©passe pas le nombre d'√©l√®ves ayant compos√©
  if (compEl && m10El && (+m10El.value > +compEl.value)) {
      m10El.value = compEl.value;
  }

  // Apr√®s chaque modification, on recalcule tout
  recalcAll();
});
bCycle.addEventListener('change', async ()=>{ await fillSpecsForCycle(bCycle.value); BSTATE.clear(); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); await autoLoadBaselines(); await refreshEffectifsForSelection(); });
bSpec.addEventListener('change', async ()=>{ BSTATE.clear(); CURRENT_CLASS=''; renderClassList(); renderDiscTable(); await autoLoadBaselines(); await refreshEffectifsForSelection(); });

btnPrefill.addEventListener('click', async ()=>{
  const evalNum = +document.getElementById('evaluation').value;
  if(!selCycle.value || !selSpec.value || !evalNum || evalNum < 2) {
      return alert('Veuillez choisir un cycle, une sp√©cialit√© et une √©valuation (sup√©rieure √† 1) pour pouvoir pr√©remplir.');
  }

  try {
    const annee = getSchoolYear();
    // L'URL est correcte, mais la logique du serveur doit renvoyer les donn√©es de l'√©valuation N-1
    const rows = await getJSON(`/collecte/prefill?annee=${encodeURIComponent(annee)}&cycle=${encodeURIComponent(selCycle.value)}&specialite=${encodeURIComponent(selSpec.value)}&evaluation=${evalNum}`);
    
    // On organise les donn√©es re√ßues pour un acc√®s facile
    const byKey = new Map((rows||[]).map(r=>[
      `${String(r.classe||'').trim()}||${String(r.discipline||'').trim()}`, r
    ]));

    if (byKey.size === 0) {
        alert("Aucune donn√©e trouv√©e pour l'√©valuation pr√©c√©dente.");
        return;
    }

    document.querySelectorAll('.classeBloc').forEach(bloc=>{
      const cls = (bloc.querySelector('h2')?.textContent||'').trim();
      bloc.querySelectorAll('tbody tr:not(.totalRow)').forEach(tr=>{
        const disc = tr.cells[0].textContent.trim();
        const src = byKey.get(`${cls}||${disc}`);
        
        // Si aucune donn√©e n'est trouv√©e pour cette discipline, on passe √† la suivante
        if(!src) return;

        // Helper pour mettre √† jour une case
        const set = (sel, val)=>{ const el=tr.querySelector(sel); if(el) el.value = val !== undefined ? +val : 0; };

        // ON MET √Ä JOUR TOUTES LES COLONNES "FAITES"
        set('.val2',  src.heuresFaites);
        set('.val5',  src.leconsFaites);
        set('.val8',  src.leconsDigFaites);
        set('.val11', src.tpFaits);
        set('.val14', src.tpDigFaits);
        set('.val16', src.elevesComposants);
        set('.val17', src.elevesMoySup10);
        set('.val20', src.effPos);
      });
    });

    // Indispensable pour que les pourcentages et totaux se mettent √† jour
    recalcAll();
    alert('Pr√©remplissage effectu√© avec les donn√©es de l\'√©valuation pr√©c√©dente.');

  } catch(e) {
    alert('Erreur lors du pr√©remplissage : '+e.message);
  }
});

function updateSummary(){
  const n = document.querySelectorAll('.classeBloc').length;
  sumSpec.textContent = selSpec.value || '‚Äî';
  const ev = document.getElementById('evaluation').value;
  sumEval.textContent = ev ? `√âvaluation ${ev}` : '‚Äî';
  sumClasses.textContent = n;
  badgeClasses.textContent = `${n} classe${n>1?'s':''}`;
  badgeClasses.classList.toggle('hidden', n===0);
}

/******************** EXPLORATEUR & FICHE PERSONNEL ********************/
const staffExplorerModal = document.getElementById('staffExplorerModal');
const staffExplorerTbody = document.getElementById('staffExplorerTbody');
const staffSearch = document.getElementById('staffSearch');
document.getElementById('btnCloseStaffExplorer')?.addEventListener('click', ()=> closeModal(staffExplorerModal));
document.getElementById('btnCloseStaffExplorer2')?.addEventListener('click', ()=> closeModal(staffExplorerModal));
const staffSheetModal = document.getElementById('staffSheetModal');
const btnCloseStaffSheet = document.getElementById('btnCloseStaffSheet');
const btnStaffSheetCancel = document.getElementById('btnStaffSheetCancel');
const btnStaffSheetSave = document.getElementById('btnStaffSheetSave');
const ssNom = document.getElementById('ssNom');
const ssGrade = document.getElementById('ssGrade');
const ssMatiere = document.getElementById('ssMatiere');
const ssStatut = document.getElementById('ssStatut');
const ssObs = document.getElementById('ssObs');
const ssClasses = document.getElementById('ssClasses');
const ssDisciplines = document.getElementById('ssDisciplines');
let STAFF_SHEET_CURRENT = null;
let STAFF_SHEET_CALLBACK = null;

function openStaffExplorer(){
  (async()=>{
    if(!SETTINGS_CACHE){
      try{
        const y=getSchoolYear();
        const s=await getJSON(`/api/settings?annee=${encodeURIComponent(y)}`);
        SETTINGS_CACHE=s;
      }catch(_){}
    }
    openModal(staffExplorerModal);
    renderStaffExplorerTable();
  })();
}
staffSearch?.addEventListener('input', ()=> renderStaffExplorerTable());
function renderStaffExplorerTable() {
  const q = (staffSearch.value || '').trim().toLowerCase();
  const list = (SETTINGS_CACHE?.staff || []).slice().sort((a, b) => (a.nom || '').localeCompare(b.nom || ''));
  staffExplorerTbody.innerHTML = '';

  list.forEach(p => {
    const classes = (p.classes || []).filter(Boolean);
    const discs = (p.disciplines || []).filter(Boolean);

    // Log pour d√©bogage
    console.log("Enseignant:", p.nom, "Disciplines:", discs);

    const hay = [
      p.nom, p.grade, p.matiere, p.statut, (p.obs || ''),
      p.prenom, p.matricule, p.telephone, p.categorie,
      p.sexe, p.dateNaissance, p.regionOrigine,
      p.departementOrigine, p.arrondissementOrigine,
      p.posteOccupe, p.rangPoste, p.dateEntreeFP,
      p.dateAffectation, ...classes, ...discs
    ].join(' ').toLowerCase();

    if (q && !hay.includes(q)) return;

    // G√©n√©rer le HTML pour les classes tenues
    const tdClasses = classes.length ? classes.map(c => `<span class="pill">${c}</span>`).join(' ') : '<span class="muted">‚Äî</span>';

    // G√©n√©rer le HTML pour les disciplines enseign√©es
    const tdDiscs = discs.length ? discs.map(d => `<span class="pill">${d}</span>`).join(' ') : '<span class="muted">‚Äî</span>';

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${p.nom || '‚Äî'}</td>
      <td>${p.prenom || '‚Äî'}</td>
      <td>${p.grade || '‚Äî'}</td>
      <td>${p.matricule || '‚Äî'}</td>
      <td>${p.matiere || '‚Äî'}</td>
      <td>${p.statut || '‚Äî'}</td>
      <td>${p.telephone || '‚Äî'}</td>
      <td>${tdClasses}</td>
      <td>${tdDiscs}</td>
      <td>${p.obs ? esc(String(p.obs)) : '‚Äî'}</td>
      <td>
        <button class="btn" type="button">üìÑ Fiche</button>
      </td>
    `;

    tr.querySelector('button').addEventListener('click', () => openStaffSheet(p, updated => {
      const S = SETTINGS_CACHE?.staff || [];
      const idx = S.findIndex(x => (x.nom || '').trim().toLowerCase() === (updated.nom || '').trim().toLowerCase());
      if (idx >= 0) S[idx] = { ...S[idx], ...updated };
      else S.push(updated);
      renderStaffExplorerTable(); // Rafra√Æchir la table apr√®s modification
    }));

    staffExplorerTbody.appendChild(tr);
  });
}



btnCloseStaffSheet?.addEventListener('click', ()=> closeModal(staffSheetModal));
btnStaffSheetCancel?.addEventListener('click', ()=> closeModal(staffSheetModal));
btnStaffSheetSave?.addEventListener('click', async () => {
  if (!STAFF_SHEET_CURRENT) return;

  // 1. R√©cup√©rer les valeurs des champs
  const updated = {
    nom: ssNom.value.trim(),
    prenom: document.getElementById('ssPrenom').value.trim(),
    grade: ssGrade.value.trim(),
    matiere: ssMatiere.value.trim(),
    statut: ssStatut.value.trim(),
    obs: ssObs.value.trim(),
    matricule: document.getElementById('ssMatricule').value.trim(),
    dateNaissance: document.getElementById('ssDateNaissance').value.trim(),
    sexe: document.getElementById('ssSexe').value.trim(),
    telephone: document.getElementById('ssTelephone').value.trim(),
    categorie: document.getElementById('ssCategorie').value.trim(),
    regionOrigine: document.getElementById('ssRegionOrigine').value.trim(),
    departementOrigine: document.getElementById('ssDepartementOrigine').value.trim(),
    arrondissementOrigine: document.getElementById('ssArrondissementOrigine').value.trim(),
    posteOccupe: document.getElementById('ssPosteOccupe').value.trim(),
    rangPoste: document.getElementById('ssRangPoste').value.trim(),
    dateEntreeFP: document.getElementById('ssDateEntreeFP').value.trim(),
    dateAffectation: document.getElementById('ssDateAffectation').value.trim(),
    classes: [...ssClasses.querySelectorAll('input[type=checkbox]:checked')].map(i => i.value),
    disciplines: [...ssDisciplines.querySelectorAll('input[type=checkbox]:checked')].map(i => i.value)
  };

  // 2. Mettre √† jour SETTINGS_CACHE
  if (SETTINGS_CACHE) {
    const S = SETTINGS_CACHE.staff || [];
    const idx = S.findIndex(p => (p.nom || '').trim().toLowerCase() === (STAFF_SHEET_CURRENT.nom || '').trim().toLowerCase());
    if (idx >= 0) S[idx] = { ...S[idx], ...updated };
    else S.push(updated);
    SETTINGS_CACHE.staff = S;
  }

  // 3. Appeler le callback si d√©fini
  if (typeof STAFF_SHEET_CALLBACK === 'function') STAFF_SHEET_CALLBACK(updated);

  // 4. Envoyer les modifications au backend
  try {
    const annee = (yearInput.value || '').trim() || getSchoolYear();
    const response = await postJSON('/api/settings', {
      annee,
      staff: SETTINGS_CACHE.staff
    });
    console.log("Sauvegarde r√©ussie :", response.message);
  } catch (e) {
    alert('Erreur lors de la sauvegarde : ' + e.message);
    console.error("Erreur sauvegarde:", e);
  }

  // 5. Fermer la modale
  closeModal(staffSheetModal);
});


function makeCheckboxPill(val, selected){
  const id = 'x_'+Math.random().toString(36).slice(2);
  return `<label for="${id}" class="pill" title="${val}"><input id="${id}" type="checkbox" value="${val}" ${selected?'checked':''}><span>${val}</span></label>`;
}
async function choicesForDisciplines(){
  const cyc = (bCycle.value || selCycle.value || '').trim();
  const spec= (bSpec.value  || selSpec.value  || '').trim();
  if(!cyc || !spec) return [];
  try{
    const rows = await getJSON(`/api/disciplines?inspection=${encodeURIComponent(CONNECTED_USER.inspection)}&cycle=${encodeURIComponent(cyc)}&specialite=${encodeURIComponent(spec)}&actif=true`);
    return [...new Set(rows.map(r=> String(r.nom||'').trim()).filter(Boolean))].sort();
  }catch(_){ return []; }
}
function choicesForClasses(){
  const fromBState = [...BSTATE.keys()];
  const fromEff = (SETTINGS_CACHE?.effectifs||[]).map(e=> String(e.classe||'').trim()).filter(Boolean);
  return [...new Set([...fromBState, ...fromEff])].sort((a,b)=> a.localeCompare(b));
}
function fillCheckboxGroup(containerEl, values, selected){
  containerEl.innerHTML = values.map(v => makeCheckboxPill(v, selected.includes(v))).join('');
}
function openStaffSheet(person, onSave) {
  (async () => {
    STAFF_SHEET_CURRENT = { ...person };
    STAFF_SHEET_CALLBACK = onSave;
    // Remplir les champs existants
    ssNom.value = person.nom || '';
    ssGrade.value = person.grade || '';
    ssMatiere.value = person.matiere || '';
    ssStatut.value = person.statut || '';
    ssObs.value = person.obs || '';
    // Remplir les NOUVEAUX champs
    document.getElementById('ssPrenom').value = person.prenom || '';
    document.getElementById('ssMatricule').value = person.matricule || '';
    document.getElementById('ssDateNaissance').value = person.dateNaissance || '';
    document.getElementById('ssSexe').value = person.sexe || '';
    document.getElementById('ssTelephone').value = person.telephone || '';
    document.getElementById('ssCategorie').value = person.categorie || '';
    document.getElementById('ssRegionOrigine').value = person.regionOrigine || '';
    document.getElementById('ssDepartementOrigine').value = person.departementOrigine || '';
    document.getElementById('ssArrondissementOrigine').value = person.arrondissementOrigine || '';
    document.getElementById('ssPosteOccupe').value = person.posteOccupe || '';
    document.getElementById('ssRangPoste').value = person.rangPoste || '';
    document.getElementById('ssDateEntreeFP').value = person.dateEntreeFP || '';
    document.getElementById('ssDateAffectation').value = person.dateAffectation || '';
    // Remplir les classes et disciplines
    const classes = choicesForClasses();
    const discs = await choicesForDisciplines();
    fillCheckboxGroup(ssClasses, classes, (person.classes || []));
    fillCheckboxGroup(ssDisciplines, discs, (person.disciplines || []));
    openModal(staffSheetModal);
  })();
}


/******************** IMPRESSION & EXPORT ‚Äî PERSONNEL & COLLECTE ********************/
function staffRowsForExport() {
  const staff = (SETTINGS_CACHE?.staff || []).slice().sort((a, b) => (a.nom || '').localeCompare(b.nom || ''));
  return staff.map(p => ({
    Nom: p.nom || '',
    Pr√©nom: p.prenom || '',
    Grade: p.grade || '',
    Mati√®re: p.matiere || '',
    Statut: p.statut || '',
    Matricule: p.matricule || '',
    T√©l√©phone: p.telephone || '',
    Cat√©gorie: p.categorie || '',
    Sexe: p.sexe || '',
    'Date de naissance': p.dateNaissance || '',
    'R√©gion d\'origine': p.regionOrigine || '',
    'D√©partement d\'origine': p.departementOrigine || '',
    'Arrondissement d\'origine': p.arrondissementOrigine || '',
    'Poste occup√©': p.posteOccupe || '',
    'Rang du poste': p.rangPoste || '',
    'Date d\'entr√©e FP': p.dateEntreeFP || '',
    'Date d\'affectation': p.dateAffectation || '',
    'Classes tenues': (p.classes || []).join(' | '),
    'Disciplines enseign√©es': (p.disciplines || []).join(' | '),
    Observations: p.obs || ''
  }));
}

function exportStaffCSV(){
  const staff = staffRowsForExport();
  const rows = [Object.keys(staff[0]||[])];
  staff.forEach(p=>rows.push(Object.values(p)));
  const csv = rows.map(r=>r.map(x=>{ const s=String(x??""); return /[",;\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }).join(";")).join("\n");
  const blob=new Blob([csv],{type:"text/csv;charset=utf-8"}), url=URL.createObjectURL(blob);
  const a=document.createElement("a"); a.href=url; a.download="personnel.csv"; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}
function printStaff(){
  const rows = staffRowsForExport();
  if(!rows.length) return alert('Aucun enseignant.');
  const w = window.open('', '_blank');
  const title = `Personnel enseignant ‚Äî ${CONNECTED_USER.etab} ‚Äî ${getSchoolYear()} ‚Äî ${CONNECTED_USER.inspection.toUpperCase()}`;
  const style = `<style>*{box-sizing:border-box;font-family:Arial,Helvetica,sans-serif} h1{margin:0 0 6px;font-size:18px} .muted{color:#6b7280;font-size:12px;margin-bottom:6px} table{width:100%;border-collapse:collapse;font-size:12px;margin:8px 0} th,td{border:1px solid #cfd4da;padding:6px;text-align:left} th{background:#eef1f4}</style>`;
  w.document.write(`<html><head><title>${title}</title>${style}</head><body><h1>${title}</h1><div class="muted">${new Date().toLocaleString()}</div>`);
  w.document.write('<table><thead><tr><th>Nom</th><th>Grade</th><th>Mati√®re</th><th>Statut</th><th>Classes tenues</th><th>Disciplines</th><th>Observations</th></tr></thead><tbody>');
  rows.forEach(r=>{ w.document.write(`<tr><td>${r.Nom||''}</td><td>${r.Grade||''}</td><td>${r.Matiere||''}</td><td>${r.Statut||''}</td><td>${r.Classes||''}</td><td>${r.Disciplines||''}</td><td>${r.Observations||''}</td></tr>`); });
  w.document.write('</tbody></table></body></html>');
  w.document.close(); w.focus(); w.print();
}
function cloneTableWithoutInputs(tbl){
  const c = tbl.cloneNode(true);
  c.querySelectorAll('input').forEach(inp=>{ const td = inp.parentElement; td.textContent = inp.value||'0'; });
  return c;
}
function printCollecte(){
  if(!document.querySelector('.classeBloc')) return alert('Aucune classe √† imprimer.');
  const w = window.open('', '_blank');
  const title = `Collecte ‚Äì ${selCycle.value||''} ${selSpec.value||''} ‚Äî √âval. ${document.getElementById('evaluation').value||'‚Äî'} ‚Äî ${((CONNECTED_USER.inspection||'')||'').toUpperCase()}`;
  const meta = `${CONNECTED_USER.etab} ‚Ä¢ ${CONNECTED_USER.nom} ‚Ä¢ ${new Date().toLocaleString()} ‚Ä¢ Inspection ${CONNECTED_USER.inspection.toUpperCase()}`;
  const style = `<style>*{box-sizing:border-box;font-family:Arial,Helvetica,sans-serif} h1{margin:0 0 6px;font-size:18px} h2{margin:10px 0 4px;font-size:16px} .muted{color:#6b7280;font-size:12px;margin-bottom:6px} table{width:100%;border-collapse:collapse;font-size:11px;margin:8px 0} th,td{border:1px solid #cfd4da;padding:4px 6px;text-align:center;vertical-align:middle} th{background:#eef1f4} .page-break{page-break-before:always} .header{display:flex;justify-content:space-between;align-items:center} .small{font-size:11px}</style>`;
  w.document.write(`<html><head><title>${title}</title>${style}</head><body>`);
  w.document.write(`<div class="header"><div><h1>${title}</h1><div class="muted">${meta}</div></div><div class="small">Cycle: <b>${selCycle.value||'‚Äî'}</b><br>Sp√©cialit√©: <b>${selSpec.value||'‚Äî'}</b></div></div>`);
  if(cycleTotalTable && cycleTotalTable.querySelector('tbody')) {
    w.document.write('<h2>Total / moyenne du cycle</h2>');
    w.document.body.appendChild(cloneTableWithoutInputs(cycleTotalTable));
  }
  document.querySelectorAll('.classeBloc').forEach((bloc, idx)=>{
    const h = bloc.querySelector('h2')?.textContent||'‚Äî';
    w.document.write(`<h2 class="${idx? 'page-break':''}">${h}</h2>`);
    const t = bloc.querySelector('table');
    w.document.body.appendChild(cloneTableWithoutInputs(t));
  });
  w.document.write('</body></html>'); w.document.close(); w.focus(); w.print();
}

/******************** Bootstrap ********************/
(async function bootstrap() {
  await refreshFiles();
  await refreshSettingsSidebar();

  try {
    const y = getSchoolYear();
    const r = await fetch(`/api/settings?annee=${encodeURIComponent(y)}`, { credentials: 'same-origin' });

    if (r.status === 404) {
      document.getElementById('btnOpenSettings')?.click();
    } else if (r.ok) {
      const js = await r.json();
      SETTINGS_CACHE = js;
      // Mettre √† jour l'UI avec les donn√©es du personnel
      (SETTINGS_CACHE?.staff || []).forEach(addStaffRow);
      const noEff = (js.effectifs || []).length === 0;
      const noStaff = (js.staff || []).length === 0;
      if (noEff && noStaff) document.getElementById('btnOpenSettings')?.click();
    }
  } catch (_) {}

  updateSummary();
})();


</script>

</body>
</html>
